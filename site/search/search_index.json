{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Drupal Commerce is the leading flexible eCommerce solution for Drupal, powering over 50,000 online stores of all sizes.</p> <p>If you are new to Drupal, start with Drupal.org documentation on Understanding Drupal</p> <p>If you develop in Drupal 7, access documentation here for Commerce 1.x</p> <p>If you develop in Drupal 8, access documentation here for Commerce 2.x</p> <p>Documentation is hosted on, and courtesy of Platform.sh.</p>"},{"location":"contribute/","title":"Contribute to documentation","text":"<p>We love contributors! Please help us improve or fix the documentation by editing a document and making a pull request in Github.</p> <p>The Drupal Commerce documentation site is built using MkDocs. It's built  with Phyton and content written in Markdown. If you are familiar with Markdown, then you can easily contribute to the documentation!</p> <p>The beauty of an open source project is that anyone can contribute. To contribute  to an open source project you need not to be a programmer, there are other ways to  contribute to an open source project than through code. The easiest way for non-programmers  is to contribute through documentation.</p> <p>If you have trouble understanding any part of the documentation, please notify those of  us who work on this section by creating an issue and clearly explain what you don\u2019t  understand and why - we\u2019re happy to hear from you, your contribution helps everyone!</p> <p>You can also contribute directly on our documentation repository by editing the files  through the GitHub interface directly in your browser. Alternatively, you can clone  the repository and edit the book in your favorite text editor.</p>"},{"location":"contribute/#choosing-an-issue","title":"Choosing an issue","text":"<p>The documentation site uses GitHub for documentation and for tracking issues. To choose an  issue,  go through the open issues, pick one you like and assign it to you or if you  don't have permission to assign, then simply inform by commenting.</p> <p>If you need help choosing an issue or working on one, join the Commerce 2.x office hours. They are held every wednesday at 5PM GMT+1 on the #commerce Drupal Slack channel.</p>"},{"location":"contribute/#formatting-help","title":"Formatting help","text":""},{"location":"contribute/#rewrite","title":"!!!REWRITE","text":"<p><code>*emphasis*</code> renders as emphasis</p> <p><code>**strong emphasis**</code> renders as strong emphasis.</p> <p><code>[Drupal Commerce](https://drupalcommerce.org)</code> renders as Drupal Commerce</p> <pre><code>![Alternative text](example.jpg)\n</code></pre> <p>Will render as -</p> <p></p> <pre><code>| Name           | Status        |\n|--------------------------------|\n| Test 1         | pass          |\n| Test 2         | pass          |\n| Test 3         | fail          |\n| Test 4         | pass          |\n</code></pre> <p>Will render as -</p> <p>| Name           | Status        | |--------------------------------| | Test 1         | pass          | | Test 2         | pass          | | Test 3         | fail          | | Test 4         | pass          |</p>"},{"location":"contribute/#creating-a-pull-request","title":"Creating a pull request","text":"<p>Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository.</p> <p>Start by creating a branch for your work. The branch name should contain a brief summary of its ID and the issue, e.g 106-create-product-type:</p> <pre><code>cd commerce-docs/v2\ngit checkout -b 106-create-product-type\n</code></pre> <p>Once you\u2019re done with documenting, push your commits to your fork:</p> <pre><code>git commit -am \"Issue 106: Created documentation for product type.\"\ngit push fork 106-create-product-type\n</code></pre> <p>You can now go to your fork\u2019s GitHub page and create a pull request.</p> <p>Once you create a pull request on GitHub, it runs checks on your pull request. If your changes pass checks then it can be reviewed by repository maintainers. You can get details about checks by clicking on Show all checks link as shown in below image.</p> <p></p> <p>To get the details about platform-based build for your pull request, click on the details link.</p> <p></p> <p>Note: Only first 10 open PRs gets the full build.</p> <p>Getting feedback</p> <p>To get the feedback on your pull request you need to ask somebody to review it, and Drupal Slack members are ready to review the pull requests for you. But first you will need an invite, you can get invite by submitting your email id here.</p> <p>In the above image, a pull request was reviewed by reviewer and some changes are suggested. So we will make the suggested changes and push the changes.</p> <pre><code># Change the desired files.\ngit commit -am \"Addressed feedback.\"\ngit push fork 106-create-product-type\n</code></pre> <p>Updating the branch will automatically update the related pull request.</p>"},{"location":"contribute/#keeping-up-to-date","title":"Keeping up to date","text":"<p>Your forked repository and the original one (called origin) will eventually get out of sync. Periodically update your fork by doing:</p> <pre><code># Update your local branch.\ngit checkout master\ngit pull origin/master\n# Push the update to your GitHub fork.\ngit push fork master\n</code></pre> <p>Your pull request might also need rebasing, to re-apply your changes on top of the latest code. Once you\u2019ve updated the master branch, rebase your branch:</p> <pre><code>git checkout 106-create-product-type\ngit rebase master\ngit push -f fork 106-create-product-type\n</code></pre> <p>That\u2019s it! Happy contributing!</p>"},{"location":"commerce2/contribute/","title":"Contributing","text":""},{"location":"commerce2/contribute/#preparing-the-local-environment","title":"Preparing the local environment","text":"<p>Start by setting up a web server, PHP and MySQL. We recommend Drupal VM for advanced users, Acquia Dev Desktop for beginners.</p> <p>You will also need Git and Composer. Note that Drupal VM comes with Composer included.</p>"},{"location":"commerce2/contribute/#getting-commerce","title":"Getting Commerce","text":"<p>The following command will download Drupal 8 + Commerce 2.x with all dependencies to the <code>mystore</code> folder:</p> <pre><code>composer create-project drupalcommerce/project-base mystore --prefer-source --stability dev\n</code></pre> <p>The \u2013prefer-source option tells Composer to use Git clone as the download method.</p> <p>When prompted, answer n to:</p> <pre><code>Do you want to remove the existing VCS (.git, .svn..) history? [Y,n]?\n</code></pre> <p>This will keep the downloaded git repositories inside their parent folders (such as <code>web/modules/contrib/commerce</code>).</p> <p>Tips:</p> <ul> <li>The <code>bin</code> folder contains Drupal Console and PHPUnit.</li> <li>The <code>web</code> folder represents the document root.</li> <li>Composer commands are always run from the site root (<code>mystore</code> in this case).</li> <li>Downloading additional modules: <code>composer require \"drupal/devel\"</code></li> <li>Updating an existing module: <code>composer update drupal/address \u2013with-dependencies</code></li> </ul> <p>See the project-base README for more details.</p> <p>Tip</p> <p>Check out our Quick start documentation to get things running easily.</p>"},{"location":"commerce2/contribute/#preparing-your-fork","title":"Preparing your fork","text":"<p>Note: You will need a GitHub account for contributing.</p> <p>Visit the Commerce repository on GitHub and click the fork button. That will create a copy of the repository on your GitHub account.</p> <p>Now go to the Commerce folder and add your fork:</p> <pre><code>cd /path/to/mystore\ncd web/modules/contrib/commerce\ngit remote add fork git@github.com:YOUR_USER/commerce.git\n</code></pre> <p>Replace YOUR_USER with your username (the full url is shown on your fork\u2019s GitHub page).</p> <p>You will now be able to push new branches to your fork and create pull requests against the main repository.</p>"},{"location":"commerce2/contribute/#running-tests","title":"Running tests","text":"<p>All of the Drupal Commerce tests are based on the PHPUnit framework. In order to run the tests you will need to copy the <code>phpunit.xml.dist</code> from the core directory and modify it for your environment. An in depth article on getting ready to run the tests can be found here: https://drupalcommerce.org/blog/45322/commerce-2x-unit-kernel-and-functional-tests-oh-my</p> <pre><code>cd /path/to/mystore/web\n# Run PHPUnit tests\n../bin/phpunit -c core/phpunit.xml modules/contrib/commerce\n</code></pre>"},{"location":"commerce2/contribute/#example-phpunitxml-environment-settings","title":"Example phpunit.xml environment settings.","text":"<p>This <code>phpunit.xml</code> assumes you will be using SQLite (requires PHP SQLite extension) and the Drupal site accessible at <code>http://localhost:8080</code>.</p> <pre><code>&lt;!-- Snippet of environment settings. --&gt;\n  &lt;php&gt;\n    &lt;!-- Set error reporting to E_ALL. --&gt;\n    &lt;ini name=\"error_reporting\" value=\"32767\"/&gt;\n    &lt;!-- Do not limit the amount of memory tests take to run. --&gt;\n    &lt;ini name=\"memory_limit\" value=\"-1\"/&gt;\n    &lt;!-- Example SIMPLETEST_BASE_URL value: http://localhost --&gt;\n    &lt;env name=\"SIMPLETEST_BASE_URL\" value=\"http://localhost:8080\"/&gt;\n    &lt;!-- Example SIMPLETEST_DB value: mysql://username:password@localhost/databasename#table_prefix --&gt;\n    &lt;env name=\"SIMPLETEST_DB\" value=\"sqlite://localhost/sites/default/files/.ht.sqlite\"/&gt;\n    &lt;!-- Example BROWSERTEST_OUTPUT_DIRECTORY value: /path/to/webroot/sites/simpletest/browser_output --&gt;\n    &lt;!--&lt;env name=\"BROWSERTEST_OUTPUT_DIRECTORY\" value=\"/path/to/drupal8/sites/simpletest/browser_output\"/&gt;--&gt;\n    &lt;env name=\"BROWSERTEST_OUTPUT_DIRECTORY\" value=\"/path/to/drupal8/sites/simpletest/browser_output\"/&gt;\n    &lt;ini name=\"display_errors\" value=\"On\" /&gt;\n    &lt;ini name=\"display_startup_errors\" value=\"On\" /&gt;\n  &lt;/php&gt;\n</code></pre> <p>You can run <code>php -S localhost:8080</code> from within your Drupal site to allow the tests to run.</p>"},{"location":"commerce2/contribute/#choosing-an-issue","title":"Choosing an issue","text":"<p>Commerce uses patches for contributing code changes and drupal.org for tracking issues. To choose an issue, go through the open issues, pick one you like and assign it to you.</p> <p>If you need help choosing an issue or working on one, join the Commerce 2.x office hours. They are held every Wednesday at 5PM GMT+1 on the #commerce Drupal Slack channel.</p> <p>Tip: You can also view the issue queue as a kanban board.</p>"},{"location":"commerce2/contribute/#creating-a-patch","title":"Creating a patch","text":"<p>Start by creating a branch for your work. The branch name should contain a brief summary of its id and the issue, e.g 2276369-fix-product-form-notice:</p> <pre><code>cd web/modules/contrib/commerce\ngit checkout -b 2276369-fix-product-form-notice\n</code></pre> <p>Once you\u2019re done with writing your code and you've committed all changes to your branch, use <code>diff</code> to create a patch. For example, if the current version of Drupal Commerce is <code>8.x-2.x</code>, create a patch like this:</p> <pre><code>git diff 8.x-2.x &gt; fix-product-form-notice-2276369-13.patch\n</code></pre> <p>Name your patch with this pattern: <code>[short-description]-[issue-number]-[comment-number].patch</code></p> <p>Note that the <code>[comment-number]</code> should be the number of the comment you will post to the issue; if the issue currently has 22 comments, then your comment number will be 23. If you have just created a new issue, then the comment number for your patch will be 2.</p>"},{"location":"commerce2/contribute/#creating-an-interdiff","title":"Creating an interdiff","text":"<p>If your patch is not the initial patch for the issue, you should also create an interdiff. For an introduction to interdiffs and how to create them, see the Drupal.org documentation on Creating an interdiff. For example, you can use patchutils to create an interdiff for a new patch like this:</p> <pre><code>interdiff fix-product-form-notice-2276369-7.patch fix-product-form-notice-2276369-13.patch &gt; interdiff-2276369-7-13.txt\n</code></pre> <p>The naming convention for interdiff files is: <code>interdiff-[issue-number]-[comment-number-for-previous-patch]-[new-comment-number].txt</code></p> <p>Using <code>.txt</code> as the extension ensures that the testbot will ignore your interdiff file.</p>"},{"location":"commerce2/contribute/#update-the-issue-and-its-status","title":"Update the issue and its status","text":"<p>Now that you've created the patch and interdiff locally, create a new comment on the issue and add your files. Typically, your patch will get automatically queued for testing. If not, you can click the <code>Add test / retest</code> link that appears below your uploaded patch to trigger the testbot.</p> <p>If there are any test failures, you should leave the issue status set to \"Needs work\" until the problems are resolved. If all tests pass, update the issue status to \"Needs review\" to get feedback from other members of the community and reviews by the module maintainers.</p> <p>Do not set the status to \"Fixed\" even though you've provided a \"fix\" in the form of your patch. The Fixed status is used by the module maintainers to indicate that either the latest patch has been committed to the development repository or the question asked in the issue has been sufficiently answered in the comments.</p> <p>Typically, an issue will need several cycles of reviews and revisions before it is ready to be committed to the Drupal Commerce project.</p>"},{"location":"commerce2/contribute/#patches","title":"Patches","text":"<p>Reviewing patches created by other members of the community is another valuable way to contribute to Drupal Commerce.</p>"},{"location":"commerce2/contribute/#applying-patches","title":"Applying Patches","text":"<ul> <li> <p>If you used <code>composer create-project</code> to create your site, you can use Composer to apply patches by modifying the <code>composer.json</code> file that's at the root of your project.</p> </li> <li> <p>If you did not use <code>composer create-project</code> to create your site, you can use the Applying patches documentation provided by drupal.org to learn about patching options.</p> </li> </ul> <p>The following documentation describes the procedure for applying patches for a composer-managed site.</p> <p>In the \"extra\" section of your <code>composer.json</code> file, you will see \"installer-types\" and \"installer-paths\". To add patches to your project, add a new \"patches\" group to \"extra\".</p> <p>For example, your \"extra\" section looks something like this without any patches:</p> <pre><code>    \"extra\": {\n        \"installer-types\": [\n            \"bower-asset\",\n            \"npm-asset\"\n        ],\n        \"installer-paths\": {\n            \"web/core\": [\n                \"type:drupal-core\"\n            ],\n            \"web/libraries/{$name}\": [\n                \"type:drupal-library\",\n                \"type:bower-asset\",\n                \"type:npm-asset\"\n            ],\n            \"web/modules/contrib/{$name}\": [\n                \"type:drupal-module\"\n            ],\n            \"web/profiles/contrib/{$name}\": [\n                \"type:drupal-profile\"\n            ],\n            \"web/themes/contrib/{$name}\": [\n                \"type:drupal-theme\"\n            ],\n            \"drush/contrib/{$name}\": [\n                \"type:drupal-drush\"\n            ]\n        }\n    }\n</code></pre> <p>Then suppose you want to apply a patch for a Drupal Commerce Issue: Issue #2901939: Move variations form to its own tab</p> <ol> <li> <p>Copy the link address for the patch you want to apply. In this case, the link address for the patch is <code>https://www.drupal.org/files/issues/2018-05-18/commerce-product-variations-tab-2901939-40.patch</code></p> </li> <li> <p>Make the following addition to the \"extra\" section of your composer.json file:</p> </li> </ol> <pre><code>\"patches\": {\n      \"drupal/commerce\": {\n          \"2901939: Move variations form to its own tab\": \"https://www.drupal.org/files/issues/2018-05-18/commerce-product-variations-tab-2901939-40.patch\"\n    }\n}\n</code></pre> <p>Note that \"drupal/commerce\" is the project name. Then for that project, you provide the specific patch information. If you have multiple patches, the \"extra\" section of your composer.json file should look something like this:</p> <pre><code>    \"extra\": {\n        \"installer-types\": [\n            \"bower-asset\",\n            \"npm-asset\"\n        ],\n        \"installer-paths\": {\n            \"web/core\": [\n                \"type:drupal-core\"\n            ],\n            \"web/libraries/{$name}\": [\n                \"type:drupal-library\",\n                \"type:bower-asset\",\n                \"type:npm-asset\"\n            ],\n            \"web/modules/contrib/{$name}\": [\n                \"type:drupal-module\"\n            ],\n            \"web/profiles/contrib/{$name}\": [\n                \"type:drupal-profile\"\n            ],\n            \"web/themes/contrib/{$name}\": [\n                \"type:drupal-theme\"\n            ],\n            \"drush/contrib/{$name}\": [\n                \"type:drupal-drush\"\n            ]\n        },\n        \"patches\": {\n            \"drupal/commerce\": {\n                \"2901939: Move variations form to its own tab\": \"https://www.drupal.org/files/issues/2018-05-18/commerce-product-variations-tab-2901939-40.patch\"\n            },\n            \"drupal/core\": {\n                \"2904908: Fetch User ID from route context views' contextual filter for any entity\": \"https://www.drupal.org/files/issues/fetch_user_id_from_route_for_all-2904908-13.patch\"\n            },\n            \"drupal/serial\": {\n                \"2946075: Support migrating existing values\": \"https://www.drupal.org/files/issues/2946075-2.serial.Support-migrating-existing-values.patch\"\n            }\n        }\n    }\n</code></pre> <p>Once you've made the changes to <code>composer.json</code>, you can apply the patch by running:</p> <pre><code>composer update drupal/commerce\n</code></pre>"},{"location":"commerce2/contribute/#reviewing-patches","title":"Reviewing patches","text":"<p>Once you've tested a patch, leave a comment on the issue. If the patch worked for you, you can change the issue status to \"Reviewed &amp; tested by the community\". If the patch didn't work for you, you can change the issue status to \"Needs work\". Provide as many details as possible to help developers reproduce your results and figure out how to fix the patch.</p> <p>How to get a Commerce issue committed</p> <ul> <li>Up to date issue summary</li> <li>Complete tests<ul> <li>If it is a bug report, tests are more important than the fix, they guarantee both that the bug exists and that the fix actually fixes it.</li> <li>Make sure to have full test coverage, lazy test writing will stall your issue.</li> </ul> </li> <li>Reports of the patch working for others<ul> <li>Explain what you\u2019re doing and what the patch fixes for you</li> <li>This is helpful even if one person has already RTBC\u2019d</li> </ul> </li> <li>Small single focus for each patch<ul> <li>Don\u2019t try to fix 8 things at once. If needed, do the most common use case and can then cover additional use cases with additional patches.</li> <li>A small patch means the reviewer can easily grasp the whole change quickly. Large and mixed patches require a lot more review and can\u2019t be done quickly as the reviewer has to spend a lot of time understanding the whole patch. 4 little patches are faster than 1 big one.</li> </ul> </li> <li>Change Record entry<ul> <li>Write a change record entry if the patch requires ANY manual work from the site owner or changes existing functionality that might be breaking or confusing.</li> </ul> </li> </ul> <p>That\u2019s it! Happy contributing!</p>"},{"location":"commerce2/getting-started/","title":"Commerce 2.x","text":"<p>At its core, Commerce is a set of Drupal 8 modules, which in turn depend on other best-of-breed modules and libraries.</p>"},{"location":"commerce2/getting-started/#using-drupal-commerce","title":"Using Drupal Commerce","text":"<p>To learn how to use Drupal Commerce, see the User Guide</p>"},{"location":"commerce2/getting-started/#working-with-drupal-commerce","title":"Working with Drupal Commerce","text":"<p>Ready to start developing and working with Drupal Commerce?</p> <ul> <li>Using Composer: If you are new to Composer or new to managing Drupal with Composer. Drupal Commerce requires using Composer with Drupal.</li> <li>Getting Help: General guidelines for how and where to get help for Drupal Commerce.</li> <li>Installation guide: To get Drupal Commerce installed.</li> <li>Updating guide guide: For keeping Drupal Commerce up to date.</li> </ul>"},{"location":"commerce2/getting-started/#looking-for-a-demo","title":"Looking for a demo?","text":"<p>There are several Drupal Commerce 2 demo sites available.</p> <ul> <li>PayPal demo, using PayPal Express Checkout for payment.</li> <li>Braintree demo, using Braintree Hosted Fields for payment.</li> <li>Square demo, using Square Payment Form for payment.</li> <li>Authorize.net demo, using Authorize.net for payment.</li> </ul> <p>Additionally, you can use the Drupal Commerce Demo button on the homepage of Simplytest to build the full demo store in a temporary web environment. Log in as the administrative user using admin / admin to test all that Commerce Core has to offer out of the box.</p>"},{"location":"commerce2/getting-started/#using-composer","title":"Using Composer","text":"<p>Composer is a tool for managing dependencies on the project level, a project being your site or web application. It has become the de facto dependency management tool for PHP. Composer allows PHP developers to easily build standalone distributable libraries that can be shared and integrated by others. This is possible in part by the PHP Framework Interoperability Group (FIG) and PSR-4 for autoloading of class files.</p> <p>Dependency management is not a new concept and not unique to PHP. NPM for NodeJS,  Bower for front end libraries, Bundler/Gems for Ruby, PIP for Python, Maven for  Java and so forth.</p> <p>If you\u2019ve ever used Drush Make to download Drupal modules and themes, then all of this sounds familiar. You can think of Composer as the more advanced Drush Make that works for all PHP projects and packages. Compared to Drush Make, Composer has the benefit of being able to recursively resolve dependencies (downloading the dependencies of each dependency) and being able to detect conflicts.</p>"},{"location":"commerce2/getting-started/#why-does-commerce-need-it","title":"Why does Commerce need it?","text":"<p>Modern applications such as Drupal 8 consist of many classes, so it would be impractical and costly to manually include each one. Instead, the application includes one special class, called the autoloader which then automatically includes other classes when they are first needed. When Composer runs, it regenerates the autoloader, giving it the locations of the newly downloaded dependencies.</p> <p>Commerce utilizes various libraries and dependencies. Without Composer and the generated class autoloader you cannot use Commerce. The libraries we depend on will not be available, even if manually installed.</p> <p>Composer also enables version constraints and prevents dependency conflicts. Without Composer there is no way to tell our users \u201cmake sure you also update this dependency as well.\u201d</p> <p>This also means less work for you.</p>"},{"location":"commerce2/getting-started/#how-to-install-composer","title":"How to install Composer","text":"<p>Composer offers a convenient installer that you can execute directly from the commandline. Follow instructions on how to install Composer here. We recommend that you use the newest version of composer, as older versions may or may not work. Check that your version matches the version listed on getcomposer.org.</p>"},{"location":"commerce2/getting-started/#how-to-use-it","title":"How to use it","text":"<p>composer.json</p> <p>The <code>composer.json</code> file defines required libraries, modules, themes, and Drupal core to download. It allows you to run commands when Composer finishes an operation, and more.</p> <p>Here is an example from the <code>commerce_authnet</code> module.</p> <pre><code>{\n  \"name\": \"drupal/commerce_authnet\",\n  \"type\": \"drupal-module\",\n  \"description\": \"Provides Commerce integration for Authorize.net.\",\n  \"homepage\": \"http://drupal.org/project/commerce_authnet\",\n  \"license\": \"GPL-2.0+\",\n  \"require\": {\n    \"drupal/commerce\": \"^2\",\n    \"commerceguys/authnet\": \"dev-master\"\n  }\n}\n</code></pre> <p>This specifies the project as being a Drupal module available at <code>drupal/commerce_authnet</code> with information about its license and homepage. It requires <code>commerce</code> of any satisfiable version 2 release, and the development version of the <code>commerceguys/authnet</code> library.</p> <p>Composer relies on semantic versioning, using <code>~</code> and <code>^</code> operators, or direct  release names (<code>2.0-beta3</code>.)</p> <p>Check out the Packagist Semver Checker to explore how version constraints work.  This link is for <code>drupal/core: ^8.3</code> https://semver.mwl.be/#?package=drupal%2Fdrupal&amp;version=%5E8.3&amp;minimum-stability=dev</p> <p>composer.lock</p> <p>The <code>composer.lock</code> file is auto generated by Composer. It has information about all the dependencies in the project, including ones your modules or themes depend on.</p> <p>The lock file contains information on how to fetch the dependency and its dependency version constraints.</p> <p>composer install</p> <p>The <code>composer install</code> command will download and install dependencies. The install command will install off of lock file. However, if no lock file is available it will act as the update command.</p> <p>The command will regenerate the class autoloader.</p> <p>composer update</p> <p>The <code>composer update</code> command resolves dependencies and generates the <code>composer.lock</code> file. The update command will update dependencies to their latest versions.</p> <p>The command will regenerate the class autoloader.</p> <p>composer require</p> <p>The <code>composer require</code> command adds a new dependency to your project. This will update the <code>composer.json</code> and <code>composer.lock</code> files and regenerate the class autoloader.</p> <p>If the new dependency has any conflicts with other dependencies, such as incompatible shared dependencies, it will not install.</p> <p>composer remove</p> <p>The <code>composer remove</code> command removes a dependency from your project. This will update the <code>composer.json</code> and <code>composer.lock</code> files and regenerate the class autoloader.</p> <p>If the dependency is required by another package, it will not be removed.</p>"},{"location":"commerce2/getting-started/#links-and-resources","title":"Links and resources","text":"<ul> <li>Managing Your Drupal Project with Composer, or the slides version</li> <li>Drupal Commerce Composer project template</li> <li>Drupal Composer project template</li> <li>Platform.sh Drupal 8 + Composer template example</li> <li>Amazee Labs Composer recipes</li> <li>Using Drupal + Composer project templates with Pantheon sites</li> <li>Using Composer - Drupal.org</li> </ul>"},{"location":"commerce2/getting-started/#getting-help","title":"Getting help","text":""},{"location":"commerce2/getting-started/#best-practices","title":"Best Practices","text":"<p>It's important to keep in mind that this is open source software. While some contributors are paid for their time (usually for specific projects/tasks), a great many more are donating their time to the community. When asking for help, you'll find that people can be very friendly and giving but only if they are treated respectfully. Also, ultimately, it's up to you to solve your own problems: nobody in the community \"works for you\". That being said, here are some general tips on how to get help in a way that's both respectful and constructive:</p> <ul> <li>Start with a search in the project's issue queue. Try to avoid posting    duplicate issues!</li> <li>If you can't find anything that's applicable to your problem, searching    Drupal Answers on StackExchange is a good next step. Post a question if none of the existing questions apply to your issue.</li> <li>For more immediate responses, you can try the Commerce Slack channel. Post a general message about the problem you're having, to start. You can get    into the details in a separate thread. If your problem is a \"known issue\",    you'll probably be directed to its Issue page.</li> <li>Chatting with people in the Slack channel may lead to a suggestion to post    a new Issue.</li> <li>If you're posting an issue for the first time, review How to create a good issue.</li> <li>Whenever you get responses to your Issue (either in the form of requests for    additional information or patches), it's helpful if you can respond quickly.</li> <li>Become an active, \"giving\" member of the Drupal Commerce community yourself.    Review patches, provide feedback, and help others in the Slack channel    whenever you can.</li> </ul>"},{"location":"commerce2/getting-started/#drupal-commerce-issue-queue","title":"Drupal Commerce Issue Queue","text":"<p>If you are new to Drupal, you will want to learn more about Drupal issue queues.</p> <p>Drupal Commerce is an actively maintained project, and oftentimes you'll be able to search its Issue Queue to find an answer to a question or a solution to a problem/bug. Solutions are usually presented in the form of a patch. See the Patching section of this documentation guide for information about applying patches.</p>"},{"location":"commerce2/getting-started/#search-drupal-answers-on-stackexchange","title":"Search Drupal Answers on StackExchange","text":"<p>Drupal Answers is a question and answer site for Drupal developers and administrators. To search for information specific to Drupal Commerce, tag your queries with <code>drupal-commerce</code>. There are thousands of posted Drupal Commerce questions, so it's a great place to look for help.</p>"},{"location":"commerce2/getting-started/#chat-with-us-on-slack","title":"Chat with us on Slack","text":"<p>Drupal Commerce benefits from an active community of developers who participate in the #commerce Slack channel. There is also a general Drupal #support channel and the Drupal #general channel for light support questions. To join, visit: http://drupalslack.herokuapp.com/</p> <p>For more information about Drupal Slack groups, see: https://www.drupal.org/slack</p>"},{"location":"commerce2/installation/","title":"Installation","text":""},{"location":"commerce2/installation/#before-you-begin","title":"Before you begin","text":"<p>If you are not familiar with using Composer to manage Drupal dependencies, read Using Composer with Drupal before continuing. Since you are already using the command line, we recommend you use Drush or Drupal console for various site management operations.</p> <p>If you want to avoid using Composer for site management, the Ludwig module offers a manual alternative to Composer. In the Installing section, we document Ludwig installation; however, most of the documentation assumes that you will be using Composer to manage your site. If you do decide to use Ludwig instead of Composer, please be aware that updating and maintaining your site will be more difficult. Site administrators using Ludwig need to be careful when combining modules that depend on external libraries, since there are no safeguards against incompatible library versions or overlapping requirements.</p>"},{"location":"commerce2/installation/#requirements","title":"Requirements","text":"<ul> <li> <p>Commerce 2.x currently requires Drupal 8.5.0 or newer. Generally we require each minor release, as it contains improvements that we use, or to reduce our code base.</p> </li> <li> <p>If you already have a web server, make sure it satisfies Drupal 8\u2019s requirements.  The recommended memory limit is 256MB or more.</p> </li> <li> <p>To properly take advantage of Drupal's configuration management system, you should always develop locally. For local development we recommend  DDEV (Docker-based) or Drupal VM (Vagrant-based).</p> </li> <li> <p>You will also need Composer. We recommend that you use the newest version of composer, as older versions may or may not work. Check that your version matches the version listed on getcomposer.org.</p> </li> </ul> <p>PHP requirements</p> <ul> <li> <p>Drupal Commerce requires that you have the bcmath extension installed.</p> </li> <li> <p>If you are using Drupal VM, add the following to your configuration (change PHP version number if needed).</p> </li> </ul> <p><pre><code>php_packages_extra:\n- php7.1-bcmath\n</code></pre> - If you are having issues related to the bcmath extension, the Drupal VM documentation provides useful information.</p>"},{"location":"commerce2/installation/#installation","title":"Installation","text":"<p>Installing Commerce to contribute back? Check out our Getting ready for development guide.</p> <p>Be sure to review requirements before starting the installation process.</p> New siteExisting siteAlternative (Ludwig) <p>The following command will download Drupal 8 + Commerce 2.x with all dependencies to the <code>mystore</code> folder:</p> <pre><code>composer create-project drupalcommerce/project-base mystore --stability dev\n</code></pre> <p>Install it just like a regular Drupal site. Commerce will be automatically enabled for you.</p> <p>Tips</p> <ul> <li>The <code>bin</code> folder contains any library binaries, such as Drupal Console, PHPUnit, Behat, etc.</li> <li>The <code>web</code> folder represents the document root.<ul> <li>If you host your site on Acquia Cloud or another service that requires Drupal in a subdirectory other than <code>web</code>, these instructions describe how you can relocate the docroot.</li> </ul> </li> <li>Composer commands are always run from the site root (<code>mystore</code> in this case).</li> <li>See the Composer template for Drupal projects README for more details.</li> </ul> <p>Run these commands in the root of your website:</p> <p>Download Commerce</p> <p>This will also download the required libraries and modules (Address, Entity, State Machine, Inline Entity Form, Profile).</p> <pre><code>cd /path/to/drupal8\ncomposer require \"drupal/commerce\"\n</code></pre> <p>Enable Commerce</p> <p>The instructions below use Drupal Console</p> <pre><code>drupal module:install commerce_product commerce_checkout commerce_cart\n</code></pre> <p>Warning</p> <p>Composer is the recommended way to install and maintain a site. Site administrators using Ludwig need to be careful when combining modules that depend on external libraries, since there are no safeguards against incompatible library versions or overlapping requirements.</p> <p>These instructions assume you are working with an existing site. See the Drupal.org documentation on Installing Drupal 8 if you do not have an existing site.</p> <ol> <li> <p>Download and install the Ludwig module.</p> </li> <li> <p>Download Commerce and the following 6 required modules. Do not install the modules yet.</p> <ul> <li>Address</li> <li>Entity API</li> <li>Entity Reference Revisions</li> <li>Inline Entity Form</li> <li>Profile</li> <li>State Machine</li> </ul> </li> <li> <p>Ludwig generates a listing of libraries required by those modules. The Packages page at <code>admin/reports/packages</code> provides a download link for each missing library along with the paths where they should be placed. </p> </li> <li> <p>Download the libraries, then clear the cache to make them available. For example, download commerceguys/addressing and place it in <code>modules/contrib/address/lib/commerceguys-addressing/v1.0.0</code>. You should see the STATUS for each required package change from \"Missing\" to \"Installed\". Alternatively, if you are comfortable with the command line, you can use Drupal Console or Drush commands.</p> <p>Drupal Console - ludwig:list: List all managed packages. - ludwig:download: Download missing packages.</p> <p>Drush - ludwig-download: Download missing packages.</p> </li> <li> <p>Install Commerce and the 6 required modules.</p> </li> </ol> <p>Whenever Commerce needs to be updated, all 7 modules need to be downloaded again, and then all of their libraries need to be downloaded again as well.</p> <p>In subsequent sections it is assumed that you are using Composer to manage your site.</p>"},{"location":"commerce2/installation/#quick-start-with-ddev","title":"Quick start with ddev","text":""},{"location":"commerce2/installation/#requirements_1","title":"Requirements","text":"<ul> <li>[Drupal 8 system requirements]</li> <li>Install Composer.</li> <li>Install ddev.</li> </ul>"},{"location":"commerce2/installation/#create-your-drupal-commerce-project","title":"Create your Drupal Commerce project.","text":"<p>The following command will download Drupal 8 + Commerce 2.x with all  dependencies to the <code>mystore</code> folder:</p> <pre><code>composer create-project drupalcommerce/project-base mystore --stability dev\n</code></pre>"},{"location":"commerce2/installation/#configure-ddev-for-local-development","title":"Configure ddev for local development.","text":"<p>Navigate to the project directory (which is 'mystore', unless you changed it  in the above command).</p> <p>Configure ddev:  <pre><code>cd mystore\nddev config\n</code></pre></p> <p>When prompted:  - Leave the project name set to the name of your project directory (mystore).  - Leave the docroot location set to 'web'.  - Leave the project type set to 'drupal8'.</p> <p>At this point, you can start up your project environment. However, you may  want to first change the http and https ports for your site, which are set to  80 and 443 by default. If these ports are already in use on your machine, you  will get the following error message:</p> <p>Failed to start commerce-docs: Unable to listen on required ports, localhost  port 80 is in use, Troubleshooting suggestions at  https://ddev.readthedocs.io/en/latest/users/troubleshooting/#unable-listen</p> <p>To change the ports used by ddev, open the file <code>.ddev/config.yaml</code> in your  project. Edit the <code>router_http_port</code> and <code>router_https_port</code> values and save  the file.</p> <p>Start running your project:  <pre><code>ddev start\n</code></pre></p> <p>When the project successfully starts, you will be given the address for your  new site. For example: <code>http://mystore.ddev.local:8080</code>. Copy and paste your  site address into a browser.</p>"},{"location":"commerce2/installation/#install-drupal-8","title":"Install Drupal 8","text":"<p>The first time you access your site, you will be asked for some basic  configuration information. For the database configuration, use <code>ddev describe</code>  to view your MySQL Credentials:</p> <p><pre><code>MySQL Credentials\n-----------------\nUsername:      db\nPassword:      db\nDatabase name: db\nHost:          db\nPort:          3306\n</code></pre>  Note that you need to open the 'Advanced options' section of the form to  enter the <code>Host</code> value.</p>"},{"location":"commerce2/installation/#getting-started","title":"Getting started","text":"<p>The very first thing you'll want to do to get started with Drupal  Commerce is create a store. Under the Commerce menu in the toolbar,  navigate to Configuration &gt; Store &gt; Stores and click the <code>Add store</code> button.  Once you've created a store, you'll be able to create products and start  developing the rest of your site.</p> <p></p>"},{"location":"commerce2/installation/#updating","title":"Updating","text":"<p>** Important: You must use Composer to update Drupal Core, Drupal Commerce, and all contributed modules. Otherwise, your site will break. Also, you should always back up your site before starting an update procedure. See Concept: Data Backups documentation in the Drupal 8 User Guide for more information. **</p> <p>It is critically important that you keep up-to-date with Drupal security advisories. You can subscribe to the \"Security announcements\" newsletter in your Drupal.org user profile settings.</p> <p>In order to keep Drupal Commerce and your other installed modules up-to-date, you can use Composer to produce a list of outdated modules with the Composer <code>outdated</code> command:</p> <pre><code>composer outdated --direct\n</code></pre> <p>Then for each outdated project, you can use the Composer <code>update</code> command:</p> <pre><code>composer update drupal/token --with-dependencies\n</code></pre> <p>To update to the newest version of Drupal Commerce, you will need to update with Composer.</p> <p>Due to the way Drupal.org manages package information, you need to run one of the following commands. Until Change submodule metadata to use '*' instead of 'self.version' is fixed, this is needed.</p> <p>To update Drupal Commerce and all contributed projects extending Drupal Commerce:</p> <pre><code>composer update --with-dependencies \"drupal/commerce*\"\n</code></pre> <p>If you want to only upgrade Drupal Commerce, run this command:</p> <pre><code>composer update --with-dependencies drupal/commerce drupal/commerce_price drupal/commerce_product drupal/commerce_order drupal/commerce_payment drupal/commerce_payment_example drupal/commerce_checkout drupal/commerce_tax drupal/commerce_cart drupal/commerce_log drupal/commerce_store drupal/commerce_promotion drupal/commerce_number_pattern\n</code></pre> <p>Once the Drupal.org infrastructure issue is resolved, the command will be</p> <pre><code>composer update drupal/commerce --with-dependencies\n</code></pre> <p>Please note the <code>--with-dependencies</code> option. Without this option specified, any needed, contributed projects and libraries will not update. Only the Drupal Commerce module will be updated.</p> <p>Run your Drupal updates once all of the dependencies are updated. We recommend running them on the command line rather than the <code>update.php</code> script. See the example below.</p> <pre><code>drupal debug:update\ndrupal update:execute\n</code></pre> <p>Composer update tips</p> <p>If your <code>composer update</code> command isn't working, you can try:</p> <ul> <li>Run <code>composer why-not</code> to check dependency issues.</li> <li>Run <code>composer remove</code> then <code>composer require</code> to reinstall the project.</li> <li>Delete the <code>composer.lock</code> file and entire /vendor directory from     your project and then run <code>composer install</code>.</li> <li>Run <code>composer clear-cache</code>.</li> <li>Run <code>composer self-update</code>.</li> </ul> <p>Drupal uses a patch system to provide solutions to issues in between version releases. If you are unfamiliar with the concept of patching, you can learn about Patches at drupal.org and check our patches documentation</p>"},{"location":"commerce2/installation/#extending","title":"Extending","text":"<p>One of the primary strengths of both Commerce and Drupal is that they are open source projects. There is a large, active community of developers who contribute to these and related projects. As a result, you will find that it's easy to extend Commerce with freely available, \"contributed\" modules. And if you can't find something to meet your needs, you can always create your own modules as well. Contributed modules as well as extensive documentation about extending your Drupal site can be found on drupal.org. A good place to start is Extending Drupal 8.</p> <p>For Commerce, you can find everything from modules that provide major types of functionality to smaller modules that provide unique, specialized functionality. For example:</p> <ul> <li>Commerce Shipping makes it possible to ship physical products to your customers.</li> <li>Commerce Recurring makes it possible to provide subscriptions and recurring billing.</li> </ul> <p>Extending your composer-managed site with additional modules is a straightforward process. Each Drupal module has its own project page on drupal.org with information and instructions. To add a module using composer, the command is:</p> <pre><code>composer require drupal/commerce_shipping --prefer-dist\n</code></pre> <p>Where <code>commerce_shipping</code> is the name of the module you want to add to your project. Composer will add the module as well as all of its dependencies.</p> <p>Then you can install the module using the Admin UI (<code>/admin/modules</code>) or Drupal console:</p> <p>The instructions below use Drupal Console</p> <pre><code>drupal module:install commerce_shipping\n</code></pre>"},{"location":"commerce2/installation/#adding-custom-modules-from-github","title":"Adding custom modules from GitHub","text":"<p>Many Drupal developers use GitHub for their initial module development work. So you may find that a module you'd like to use to extend your site is available on GitHub but not on Drupal.org. So how do you add that custom module to your composer-managed site? You can use Composer Installers, a multi-framework composer library installer. Please see How to download a module hosted on GitHub via composer.json? on Drupal Answers for a good example of how to do this.</p> <p>If you are developing custom modules locally yourself, see Managing dependencies for a custom product for an explanation of using Composer to manage your dependencies.</p>"},{"location":"commerce2/installation/#uninstalling","title":"Uninstalling","text":"<p>In order to completely remove Commerce from your Drupal site, you will first need to delete all existing data. You can do this through the Admin UI using the <code>Extend</code> toolbar item and then clicking on the <code>Uninstall</code> tab.</p> <p>Type 'commerce' into the text box at the top of the page to filter the list by Commerce modules.</p> <p>Scan through the list for items that say: <pre><code>There is content for the entity type:\n</code></pre></p> <p>Click the provided link to permanently remove the content for each entity type.</p> <p>For example, if you have created a Store for your site, you will see:</p> <p></p> <p>Click the <code>Remove stores</code> link.</p> <p>Once all content has been removed, you can start uninstalling the commerce modules. You will only be able to uninstall a few at a time because of dependencies. For example, you will not be able to uninstall the base Commerce module until all other commerce modules are uninstalled. Note: if you have extended your Drupal Commerce site with any modules that are dependent upon Commerce, those modules will also need to be uninstalled before you are able to uninstall Commerce.</p> <p>Here you can see boxes checked for 5 of the Commerce modules which can be uninstalled. After clicking the <code>Uninstall</code> button, it will be possible to uninstall additional modules.</p> <p></p> <p>Since the Commerce base module provides a field type, it cannot be uninstalled together with the other modules. This is a known Drupal limitation. You will be blocked from uninstalling Commerce and see a \"Fields pending deletion\" message. You can delete the field in question by running Cron. You can run Cron through the Admin UI by navigating to Configuration &gt; System &gt; Cron.</p> <p>Once all Commerce modules have been uninstalled, use Composer to remove the Commerce dependency from your project.</p> <pre><code>composer remove drupal/commerce\n</code></pre> <p>At this point, Commerce and all its data have been uninstalled from your Drupal site.</p>"},{"location":"commerce2/installation/#links-and-resources","title":"Links and resources","text":"<ul> <li>Best Practice Drupal Development</li> <li>Why must we use Composer?</li> </ul>"},{"location":"commerce2/developer-guide/","title":"Developer guide","text":"<p>This section is for anyone implementing Drupal Commerce. It explains dependencies and how they are used and shows differents integration options.</p> <p>The Developer guide is primarily for audiences who may have a WooCommerce background, for example. It is assumed for anyone who is using Drupal Commerce for the first time.</p> <p>We will include an Adapting from 1.x section. This is a section that essentially highlights how developer implementations in 1.x would be done in 2.x</p>"},{"location":"commerce2/developer-guide/core/","title":"Core components","text":"<p>Drupal Commerce is built from many different components. Understanding these building blocks and their functionality will aid you in building your Drupal Commerce store.</p> <p>Libraries and dependencies</p> <p>Conditions</p> <ul> <li>Learn how the Core Conditions component allows us to create configuration entities with conditions.</li> <li>Learn how to build your own Condition plugin or alter an existing one.</li> <li>Learn how to filter the list of Conditions provided for specific configuration entities.</li> </ul> <p>Sending HTML emails</p> <ul> <li>Learn how to use the Swift Mailer module to send HTML emails.</li> <li>More TBD</li> </ul> <p>Understanding resolvers</p> <ul> <li>Learn about the concept of Resolvers.</li> <li>Learn about types of Resolvers and how they're used in Drupal Commerce.</li> <li>Learn about the structure of Resolvers and Chain resolvers.</li> </ul> <p>Relationship diagrams</p> <ul> <li>Learn about the major Drupal Commerce entities and their relationships.</li> </ul>"},{"location":"commerce2/developer-guide/core/#php-libraries","title":"PHP libraries","text":"<p>The following PHP libraries are used:</p> <p>commerceguys/intl: An internationalization library powered by CLDR data. Handles currencies, currency formatting, and more.</p> <p>commerceguys/addressing: An addressing library, powered by Google\u2019s dataset. Stores and manipulates postal addresses.</p>"},{"location":"commerce2/developer-guide/core/#dependancies","title":"Dependancies","text":""},{"location":"commerce2/developer-guide/core/#profile","title":"Profile","text":"<p>The Profile module provides the profile entity type used to collect customer information. In Commerce 1.x, we called these entities \u201cCustomer Profiles\u201d and for Commerce 2.x we have moved to where the community has extended user profiles to include fieldable entity bundles.</p> <p>The fieldable Profile entity allows administrators to define different sets of fields for user profiles, which are then displayed in the My Account section. This permits users of a site to share more information about themselves and can help community-based sites organize users around specific information.</p> <p>See Also: Profile module on Drupal.org</p> <p>Additional documentation on Profiles and how they are used within Drupal Commerce is provided within the Customers section of this guide.</p>"},{"location":"commerce2/developer-guide/core/#inline-entity-form","title":"Inline Entity Form","text":"<p>See Also: module on drupal.org</p> <p>Provides a widget for inline management (creation, modification, removal) of referenced entities. Commerce uses it extensively for product variations, line items, and (soon) tax rate amounts.</p>"},{"location":"commerce2/developer-guide/core/#state-machine","title":"State Machine","text":"<p>See Also: State machine module on drupal.org</p> <p>The State Machine module provides code-driven workflow functionality.</p> <p>A workflow is a set of states and transitions that an entity goes through during its lifecycle. A transition represents a one-way link between two states and has its own label. The current state of a workflow is stored in a state field, which provides an API for getting and applying transitions. An entity can have multiple workflows, each in its own state field. An order might have checkout and payment workflows. A node might have legal and marketing workflows. Workflow groups are used to group workflows used for the same purpose (e.g. payment workflows).</p> <p>Architecture</p> <ul> <li>Provides a technical overview of the State Machine module's architecture.</li> </ul> <p>Working with State fields</p> <ul> <li>Learn how State fields are used within Drupal Commerce.</li> <li>Learn how to create custom State fields, workflows, and workflow groups.</li> <li>Includes example for a custom Order item fulfillment State field.</li> </ul> <p>State transition Guards</p> <ul> <li>Guards can be used to add business logic constraints to State transitions.</li> <li>Includes example code for an Order fulfillment workflow Guard.</li> </ul> <p>State transition event subscribers</p> <ul> <li>Learn about the different types of Events provided by the State machine module.</li> <li>Includes example code for reacting to the transitions of a custom Order item fulfillment field.</li> </ul> <p>Code recipes</p> <ul> <li>Alter existing workflows.</li> <li>Get State field values.</li> <li>Apply State transitions programatically.</li> </ul>"},{"location":"commerce2/developer-guide/core/#architecture","title":"Architecture","text":"<p>Workflow and WorkflowGroup are plugins defined in YAML, similar to menu links.</p> <p>Example: <code>commerce_order.workflow_groups.yml</code>:</p> <pre><code>order:\n  label: Order\n  entity_type: commerce_order\n</code></pre> <p>Groups can also override the default workflow class, for more advanced use cases.</p> <p>Example: <code>commerce_order.workflows.yml</code>:</p> <pre><code>order_default_validation:\n  id: order_default_validation\n  group: commerce_order\n  label: 'Default, with validation'\n  states:\n    draft:\n      label: Draft\n    validation:\n      label: Validation\n    completed:\n      label: Completed\n    canceled:\n      label: Canceled\n  transitions:\n    place:\n      label: 'Place order'\n      from: [draft]\n      to:   validation\n    validate:\n      label: 'Validate order'\n      from: [validation]\n      to: completed\n    cancel:\n      label: 'Cancel order'\n      from: [draft, validation]\n      to:   canceled\n</code></pre> <p>Transitions can be further restricted by guards, which are implemented as tagged services:</p> <pre><code>mymodule.fulfillment_guard:\n        class: Drupal\\mymodule\\Guard\\FulfillmentGuard\n        tags:\n          - { name: state_machine.guard, group: commerce_order }\n</code></pre> <p>The group argument allows the guard factory to only instantiate the guards relevant to a specific workflow group.</p> <p>The current state is stored in a StateItem field. A field setting specifies the used workflow, or a value callback that allows the workflow to be resolved at runtime (checkout workflow based on the used plugin, etc.). A validator is provided that ensures that the specified state is valid (exists in the workflow and is in the allowed transitions).</p> <p>If a transition has been applied, the StateItem field will dispatch several events on entity save. The pre_transition events are dispatched before the save (and allow the entity to be modified), while the post_transition events are dispatched after the save.</p>"},{"location":"commerce2/developer-guide/core/#working-with-state-fields","title":"Working with state fields","text":"<p>Drupal Commerce uses State fields for two of its entities: Orders and Payments. You can learn more about Order workflows in the Orders documentation section. The Payments information structure documentation describes the states of Default and Manual Payment workflows. There are also examples of altering Payment workflows in the Payments code recipes and the State machine code recipes.</p> <p>In this documentation section, we will go through an example of creating a custom State field, workflow, and workflow group and continue to build out the example in the next two sections on Guards and Transition event subscribers.</p> <p>Our custom state field will be added to Order item entities, and we'll use it to track order fulfillment on a per-item basis. We are assuming that order items will be \"filled\" from inventory manually by administrative users. We'll also add in an option to \"backorder\" an item, if inventory is not currently available for that item. An order will not be complete until each of its items has either been filled or backordered.</p> <p>A custom \"State\" field can be created through the admin UI like any other custom field. Navigate to the \"Manage fields\" page for the \"Default\" order type at <code>admin/commerce/config/order-item-types/default/edit/fields</code> and click the \"Add field\" button to add a new \"State\" field. We'll name our new field \"Fulfillment state\" with machine ID: <code>field_fulfillment_state</code>. The number of allowed values for a State field should always be set to 1.</p> <p></p> <p>All that is fairly straightforward, but we have a problem. We cannot set a \"Workflow\" for the field since none are available for this entity type. If we were adding the custom field to a Payment type or Order type, we could use the workflows defined for those entities. But since we are creating a State field on an Order item type, we need to create a new custom workflow.</p> <p></p> <p>It is not possible to create a workflow through the admin UI, so we need to add its definition using a custom module. See the Drupal.org Creating custom modules documentation if you need help getting started. In this example, we'll assume we've created and installed a custom module named <code>mymodule</code>.</p> <p>We need to create both a custom workflow and a workflow group for our order item State field. Workflow and WorkflowGroup are plugins defined in YAML, similar to menu links.</p> <p>Our workflow group is defined in <code>mymodule.workflow_groups.yml</code>, a YAML file which should exist in the root folder of our custom module. We provide an ID for the workflow group on the first line and then define its Label and the entity type.</p> <pre><code>mymodule_order_item:\n  label: 'Order item'\n  entity_type: commerce_order_item\n</code></pre> <p>Now that we have a workflow group for Order item entities, we can create one or more workflows in <code>mymodule.workflows.yml</code>. Here is the definition for our order item fulfillment workflow. Notice that we reference the ID of the workflow group we just defined as the <code>group</code>. The <code>label</code> is what administrative users will see when selecting a workflow for a State field.</p> <pre><code>mymodule_order_item_fulfillment:\n  id: mymodule_order_item_fulfillment\n  group: mymodule_order_item\n  label: 'Order item fulfillment'\n  states:\n    unfilled:\n      label: 'Not filled'\n    filled:\n      label: Filled\n    backordered:\n      label: Backordered\n  transitions:\n    fill:\n      label: 'Fill item'\n      from: [unfilled, backordered]\n      to: filled\n    unfill:\n      label: 'Un-fill item'\n      from: [filled]\n      to:   unfilled\n    backorder:\n      label: 'Backorder item'\n      from: [unfilled]\n      to: backordered\n</code></pre> <p>Following <code>id</code>, <code>group</code>, and <code>label</code>, we have two sections which define our workflow: <code>states</code> and <code>transitions</code>. </p> <p>For each state, we simply define a label for each of the state IDs. The state IDs (<code>unfilled</code>, <code>filled</code>, <code>backordered</code>) will be used whenever we want to work with the workflow programatically. The state labels (\"Not filled\", \"Filled\", \"Backordered\") will be used when displaying state values through the admin UI.</p> <p>Defining the transitions can be trickier, if your workflow has any complex logic. Sketching out the states and transitions on paper with boxes and arrows can be helpful. For example, here is a diagram for our order item fulfillment workflow:</p> <p></p> <p>Notice that there are two separate arrows for the \"Un-fill\" and \"Fill\" transtions between the \"Not filled\" and \"Filled\" states. State transitions are always one-way, so we need a separate transition for each direction. Also, for any transition, there can only be exactly one \"to\" state. Since any transition can have multiple \"from\" states, those state IDs are defined with square brackets.</p> <p>After creating the workflow group and workflow YAML files, we just need to clear caches so that the configuration can be discovered. Now we can set the workgroup value for our custom Order item state field through the admin UI:</p> <p></p> <p>To see the new State field in action, create a new order and then edit it through the admin UI. We now have a Fulfillment state field on the order item with State options matching the ones defined for its workflow. If you update its state to \"Filled\" and then save, you will see that the options change the next time you edit the order item. Only \"Un-fill\" will be available as an option.</p> <p></p>"},{"location":"commerce2/developer-guide/core/#state-transition-guards","title":"State transition Guards","text":"<p>The workflow set for a State field defines all the states and transitions that are available for that field. For example, the Commerce Order \"Fulfillment\" workflow has states: \"Draft\", \"Fulfillment\", \"Completed\", and \"Canceled\", with transitions: \"Place\", \"Fulfill\", and \"Cancel\". This diagram illustrates the states and transitions of the Order fulfillment workflow:</p> <p></p> <p>When an order is placed, either at checkout or through the admin UI, its State changes from \"Draft\" to \"Fulfillment\". After that, administrative users can manually transition the order's state to \"Completed\" or \"Canceled\". </p> <p></p> <p>But what if we wanted to add constraints to prevent administrative users from moving an Order from the Fulfillment state to Completed or Canceled under certain conditions? In the Custom state fields documentation, we created a custom State field for Order items, to track fulfillment on a per-item basis. We might want to prevent users from cancelling an order if any of its order items have already been \"filled\". And we might want to prevent users from transitioning an order to Completed if any of its items are still \"un-filled\". The State Machine module's state transition \"Guards\" provide the ability to incorporate this sort of business logic. State transition Guards limit the transitions available for a State field based on contextual information. Transitions can be restricted based on the current user's permissions, a parent entity field, etc.</p> <p></p> <p>Using Guards requires writing custom code. Specifically, you will need to write a tagged service that implements <code>Drupal\\state_machine\\Guard\\GuardInterface</code>. This interface defines a single method that returns a boolean TRUE/FALSE value:</p> <pre><code>public function allowed(WorkflowTransition $transition, WorkflowInterface $workflow, EntityInterface $entity);\n</code></pre> <p>If the given transition is allowed for the workflow, return <code>TRUE</code>; otherwise return <code>FALSE</code>.</p> <p>Here is an example Guard implementation that implements the business logic described above:</p> <pre><code>&lt;?php\n\nnamespace Drupal\\mymodule\\Guard;\n\nuse Drupal\\Core\\Entity\\EntityInterface;\nuse Drupal\\state_machine\\Guard\\GuardInterface;\nuse Drupal\\state_machine\\Plugin\\Workflow\\WorkflowInterface;\nuse Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition;\n\nclass FulfillmentOrderGuard implements GuardInterface {\n\n  public function allowed(WorkflowTransition $transition, WorkflowInterface $workflow, EntityInterface $entity) {\n    if ($transition-&gt;getId() == 'cancel') {\n      // Do not cancel orders with filled items.\n      foreach ($entity-&gt;getItems() as $order_item) {\n        if ($order_item-&gt;get('field_fulfillment_state')-&gt;first()-&gt;getId() == 'filled') {\n          return FALSE;\n        }\n      }\n      return TRUE;\n    }\n    if ($transition-&gt;getId() == 'fulfill') {\n      // All items must be filled or backordered. At least one must be filled.\n      $has_filled_item = FALSE;\n      foreach ($entity-&gt;getItems() as $order_item) {\n        $inventory_state = $order_item-&gt;get('field_fulfillment_state')-&gt;first()-&gt;getId();\n        if ($inventory_state != 'filled' &amp;&amp; $inventory_state != 'backordered') {\n          return FALSE;\n        }\n        $has_filled_item = $inventory_state == 'filled' ? TRUE : $has_filled_item;\n      }\n      return $has_filled_item;     \n    }\n\n    // All other transitions.\n    return TRUE;\n  }\n\n}\n</code></pre> <p>By itself, this <code>FulfillmentOrderGuard</code> class won't do anything. We need to add it to our custom module's <code>services.yml</code> file so that it can be discovered. The <code>group</code> argument allows the guard factory to only instantiate the guards relevant to a specific workflow group. In this case, we want the <code>commerce_order</code> group since our Guard is intended for the Commerce order <code>State</code> field:</p> <pre><code>services:\n  mymodule.fulfillment_order_guard:\n    class: Drupal\\mymodule\\Guard\\FulfillmentOrderGuard\n    tags:\n      - { name: state_machine.guard, group: commerce_order }\n</code></pre> <p>If we wanted to implement a Guard for the custom Order item \"Fulfillment state\" field we implemented in the Custom state fields documentation, the <code>group</code> value would change to match that custom workflow group:</p> <pre><code>  mymodule.fulfillment_order_item_guard:\n    class: Drupal\\mymodule\\Guard\\FulfillmentOrderItemGuard\n    tags:\n      - { name: state_machine.guard, group: mymodule_order_item }\n</code></pre>"},{"location":"commerce2/developer-guide/core/#state-transition-event-subscribers","title":"State transition event subscribers","text":"<p>In the previous two sections, we created a custom Order item State field, Workflow and state transition Guard that could be used as parts of a custom Order fulfillment management system. Here we'll continue with that example and look at how event subscribers that react to State transition events can be used to provide custom business logic for your Drupal Commerce application.</p> <p>If you're unfamiliar with the concept of event subscribers, you may want to start with documentation provided by Drupal.org: - Subscribe to and dispatch events - EventSubscriber example</p> <p>The State machine module dispatches several events whenever a transition is applied to a State field. The two types of events are <code>pre_transition</code> phase and <code>post_transition</code> phase.</p> <ul> <li>Pre-transition phase events are dispatched right before the State field's entity is saved and allow the entity to be modified.</li> <li>Post-transition phase events are dispatched right after the State field's entity is saved.</li> </ul> <p>Both types of events provide methods that can be used by your event subscriber:</p> <pre><code>/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition $transition */\n$transition = $event-&gt;getTransition();\n\n/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowInterface $workflow */\n$workflow = $event-&gt;getWorkflow();\n\n/** @var \\Drupal\\Core\\Entity\\ContentEntityInterface $entity */\n$entity = $event-&gt;getEntity();\n\n/** @var string $state_field_name */\n$state_field_name = $event-&gt;getFieldName();\n\n/** @var \\Drupal\\state_machine\\Plugin\\Field\\FieldType\\StateItemInterface $state_field */\n$state_field = $event-&gt;getField();\n</code></pre> <p>When subscribing to a State transition event, you will specify pre- or post- transition as well as the type(s) of transitions you are targeting.</p>"},{"location":"commerce2/developer-guide/core/#generic-state-transition-events","title":"Generic state transition events","text":"<p>The <code>state_machine.pre_transition</code> and <code>state_machine.post_transition</code> events are fired for any transition on any State field. They are useful for logging, notifications, and other use cases that require reacting to every transition regardless of the workflow group. For an example of generic (and other) state transition event subscribers, see the WorkflowTransitionEventSubscriber test code provided by the State machine module.</p>"},{"location":"commerce2/developer-guide/core/#workflow-group-specific-state-transition-events","title":"Workflow group-specific state transition events","text":"<p>The pattern for workflow group-specific events is \"{$workflow_group_id}.{$phase}\", where {$workflow_group} is something like, <code>commerce_order</code> or <code>mymodule_order_item</code> and {$phase} is either <code>pre_transition</code> or <code>post_transition</code>.</p> <p>These events are useful for performing an action based on the \"to\" state, regardless of which transition made the change. You can get the \"to\" state and its ID from the event transition, like this:</p> <pre><code>/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition $transition */\n$transition = $event-&gt;getTransition();\n\n/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowState $to_state */\n$to_state = $transition-&gt;getToState();\n\n$to_state_id = $to_state-&gt;getId();\n</code></pre> <p>Example: subscriber to log all Order item fulfillment events</p> <p>In Working with state fields, we created the <code>mymodule_order_item</code> custom workflow group for an Order item fulfillment state field. We can implement an event subscriber to log all transitions (for any workflow assigned to the group) by subscribing to the <code>mymodule_order_item.post_transition</code>, like this:</p> <pre><code>namespace Drupal\\mymodule\\EventSubscriber;\n\nuse Drupal\\state_machine\\Event\\WorkflowTransitionEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass OrderItemFulfillmentSubscriber implements EventSubscriberInterface {\n\npublic static function getSubscribedEvents() {\n    $events = [\n    'mymodule_order_item.post_transition' =&gt; 'onLogOrderItemTransition',\n    ];\n    return $events;\n}\n\npublic function onLogOrderItemTransition(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $transition_id = $event-&gt;getTransition()-&gt;getId();\n    // Log order item transition here.\n}\n\n}\n</code></pre> <p>Example code for logging an order item transition can be found in the Code recipes section of the Activity logs documentation.</p>"},{"location":"commerce2/developer-guide/core/#transition-specific-state-transition-events","title":"Transition-specific state transition events","text":"<p>The pattern for workflow group-specific events is \"{$workflow_group_id}.{$transition_id}.{$phase}\". These transition-specific state transition events can be extremely useful for powering business logic in Drupal Commerce applications. </p> <p>For example, the event subscriber that sets order numbers when an order is placed subscribes to the <code>commerce_order.place.pre_transition</code> event:</p> <ul> <li><code>commerce_order</code> is the workflow group.</li> <li><code>place</code> is the transition.</li> <li><code>pre_transition</code> is the phase.</li> </ul> <p>Additionally, other event subscribers for the <code>commerce_order.place.pre_transition</code> event perform cart finalization operations and register coupon/promotion usage, and an event subscriber for the <code>commerce_order.place.post_transition</code> event does some address book management.</p> <p>Example: event subscriber to manage Order item fulfillment</p> <p>In Working with state fields, we created a custom workflow for an Order item state field with <code>fill</code> and <code>unfill</code> transitions. In a custom inventory management system, we could implement event subscribers for the <code>mymodule_order_item.fill.pre_transition</code> and <code>mymodule_order_item.unfill.pre_transition</code> events to make the actual updates to inventory data, like this:</p> <pre><code>&lt;?php\n\nnamespace Drupal\\mymodule\\EventSubscriber;\n\nuse Drupal\\Core\\Entity\\EntityTypeManagerInterface;\nuse Drupal\\mymodule\\InventoryManagerInterface;\nuse Drupal\\state_machine\\Event\\WorkflowTransitionEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass OrderItemFulfillmentSubscriber implements EventSubscriberInterface {\n\n/**\n * The custom inventory manager.\n *\n * @var \\Drupal\\mymodule\\InventoryManagerInterface\n */\nprotected $inventoryManager;\n\n/**\n * The log storage.\n *\n * @var \\Drupal\\commerce_log\\LogStorageInterface\n */\nprotected $logStorage;\n\n/**\n * Constructs a new OrderItemFulfillmentSubscriber object.\n *\n * @param \\Drupal\\mymodule\\InventoryManagerInterface $inventory_manager\n *   The inventory manager.\n * @param \\Drupal\\Core\\Entity\\EntityTypeManagerInterface $entity_type_manager\n *   The entity type manager.\n */\npublic function __construct(InventoryManagerInterface $inventory_manager, EntityTypeManagerInterface $entity_type_manager) {\n    $this-&gt;inventoryManager = $inventory_manager;   \n    $this-&gt;logStorage = $entity_type_manager-&gt;getStorage('commerce_log');\n}\n\n/**\n * {@inheritdoc}\n */\npublic static function getSubscribedEvents() {\n    $events = [\n    'mymodule_order_item.fill.pre_transition' =&gt; 'onOrderItemFill',\n    'mymodule_order_item.unfill.pre_transition' =&gt; 'onOrderItemUnFill',\n    'mymodule_order_item.post_transition' =&gt; 'onLogOrderItemTransition',\n    ];\n    return $events;\n}\n\n\n/**\n * Executes the actual inventory transaction for the order item fill.\n *\n * @param \\Drupal\\state_machine\\Event\\WorkflowTransitionEvent $event\n *   The event.\n */\npublic function onOrderItemFill(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $this-&gt;inventoryManager-&gt;fillOrderItem($order_item);\n}\n\n/**\n * Executes the inventory transaction for un-filling the order item.\n *\n * @param \\Drupal\\state_machine\\Event\\WorkflowTransitionEvent $event\n *   The event.\n */\npublic function onOrderItemUnFill(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $this-&gt;inventoryManager-&gt;unfillOrderItem($order_item);\n}\n\n/**\n * Log all order item fulfillment transitions to the parent order.\n *\n * @param \\Drupal\\state_machine\\Event\\WorkflowTransitionEvent $event\n *   The transition event.\n */\npublic function onLogOrderItemTransition(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $transition_id = $event-&gt;getTransition()-&gt;getId();\n    $this-&gt;logStorage-&gt;generate($order_item-&gt;getOrder(), 'order_item_' . $transition_id, [\n    'order_item_id' =&gt; $order_item-&gt;id(),\n    ])-&gt;save();\n}\n\n}\n</code></pre> <p>In the above example, the \"inventory manager\" is not an actual Drupal Commerce service. You would need to implement your own custom service to manage updates to inventory with <code>fillOrderItem()</code> and  <code>unfillOrderItem()</code> or similar methods.</p>"},{"location":"commerce2/developer-guide/core/#code-recipes","title":"Code recipes","text":""},{"location":"commerce2/developer-guide/core/#alter-existing-workflows","title":"Alter existing workflows","text":"<p>If your State field can be configured through the admin UI, then you can usually just create your own custom workflow for use with the State field. See the examples in the State fields documentation.</p> <p>The workflows for Payment states are not as easily altered, since they are managed entirely by code. Payment gateways define their Payment types in the gateway plugin annotation, and Payment types define the workflow for the Payment State field in their annotations. So there is no admin UI that allows you to change the workflow for Payments. Instead, you can use a hook provided by the State machine module.</p> <p>Here is an example for changing the label for a Payment State, using <code>hook_workflows_alter(array &amp;$workflows)</code>.</p> <p>Example</p> <pre><code>/**\n * Change the label for the \"Completed\" state to \"Captured\", for the `payment_default` workflow.\n *\n * @param array $workflows\n *   Workflow definitions, keyed by plugin ID.\n */\nfunction mymodule_workflows_alter(array &amp;$workflows) {\n$workflows['payment_default']['states']['completed']['label'] = 'Captured';\n}\n</code></pre> <p>In addition to <code>hook_workflows_alter(array &amp;$workflows)</code>, the State machine module also provides <code>hook_workflow_groups_alter(array &amp;$workflow_groups)</code> for altering the definitions of workflow groups.</p>"},{"location":"commerce2/developer-guide/core/#get-values-for-a-state-field","title":"Get values for a State field","text":"<p>See <code>Drupal\\state_machine\\Plugin\\Field\\FieldType\\StateItemInterface</code> for the full definitions of all methods available for State fields. Here are a few examples for the most commonly used operations:</p> <p>Current state ID for an Order entity</p> <p>The state ID is a string; for example: <code>draft</code>. <pre><code>/** @var \\Drupal\\commerce_order\\Entity\\OrderInterface $order */\n$state = $order-&gt;getState()-&gt;getId();\n</code></pre></p> <p>Label for an entity with a custom State field</p> <p>In this example, we've added a \"Fulfillment state\" field to an Order item type, with machine ID: <code>field_fulfillment_state</code>. <pre><code>/** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n$label = $order_item-&gt;get('field_fulfillment_state')-&gt;first()-&gt;getLabel();\n</code></pre></p> <p>Allowed transitions for the current state of a Payment entity</p> <pre><code>/** @var \\Drupal\\commerce_payment\\Entity\\PaymentInterface $payment */\n/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition[] $transitions */\n$transitions = $payment-&gt;getState()-&gt;getTransitions();\n</code></pre>"},{"location":"commerce2/developer-guide/core/#change-the-current-state-for-a-state-field","title":"Change the current state for a State field","text":"<p>The current state should always be changed by applying a transition. Do not attempt to \"set\" the value of the State field directly. You can use the <code>applyTransition(WorkflowTransition $transition)</code> method to change the current state using a transition or apply a transition by ID, like this:</p> <p>Place an order</p> <pre><code>/** @var \\Drupal\\commerce_order\\Entity\\OrderInterface $order */\n$order-&gt;getState()-&gt;applyTransitionById('place');\n$order-&gt;save();\n</code></pre> <p>Apply the \"complete\" transition to a custom State field</p> <pre><code>/** @var \\Drupal\\state_machine\\Plugin\\Field\\FieldType\\StateItemInterface $state_item */\n$state_item = $entity-&gt;get('field_state')-&gt;first();\n$state_item-&gt;applyTransitionById('complete');\n$entity-&gt;save();\n</code></pre>"},{"location":"commerce2/developer-guide/state-machine/","title":"State machine","text":"<p>See Also: State machine module on drupal.org</p> <p>The State Machine module provides code-driven workflow functionality.</p> <p>A workflow is a set of states and transitions that an entity goes through during its lifecycle. A transition represents a one-way link between two states and has its own label. The current state of a workflow is stored in a state field, which provides an API for getting and applying transitions. An entity can have multiple workflows, each in its own state field. An order might have checkout and payment workflows. A node might have legal and marketing workflows. Workflow groups are used to group workflows used for the same purpose (e.g. payment workflows).</p> <p>Architecture</p> <ul> <li>Provides a technical overview of the State Machine module's architecture.</li> </ul> <p>Working with State fields</p> <ul> <li>Learn how State fields are used within Drupal Commerce.</li> <li>Learn how to create custom State fields, workflows, and workflow groups.</li> <li>Includes example for a custom Order item fulfillment State field.</li> </ul> <p>State transition Guards</p> <ul> <li>Guards can be used to add business logic constraints to State transitions.</li> <li>Includes example code for an Order fulfillment workflow Guard.</li> </ul> <p>State transition event subscribers</p> <ul> <li>Learn about the different types of Events provided by the State machine module.</li> <li>Includes example code for reacting to the transitions of a custom Order item fulfillment field.</li> </ul> <p>Code recipes</p> <ul> <li>Alter existing workflows.</li> <li>Get State field values.</li> <li>Apply State transitions programatically.</li> </ul>"},{"location":"commerce2/developer-guide/state-machine/#architecture","title":"Architecture","text":"<p>Workflow and WorkflowGroup are plugins defined in YAML, similar to menu links.</p> <p>Example: <code>commerce_order.workflow_groups.yml</code>:</p> <pre><code>order:\n  label: Order\n  entity_type: commerce_order\n</code></pre> <p>Groups can also override the default workflow class, for more advanced use cases.</p> <p>Example: <code>commerce_order.workflows.yml</code>:</p> <pre><code>order_default_validation:\n  id: order_default_validation\n  group: commerce_order\n  label: 'Default, with validation'\n  states:\n    draft:\n      label: Draft\n    validation:\n      label: Validation\n    completed:\n      label: Completed\n    canceled:\n      label: Canceled\n  transitions:\n    place:\n      label: 'Place order'\n      from: [draft]\n      to:   validation\n    validate:\n      label: 'Validate order'\n      from: [validation]\n      to: completed\n    cancel:\n      label: 'Cancel order'\n      from: [draft, validation]\n      to:   canceled\n</code></pre> <p>Transitions can be further restricted by guards, which are implemented as tagged services:</p> <pre><code>mymodule.fulfillment_guard:\n        class: Drupal\\mymodule\\Guard\\FulfillmentGuard\n        tags:\n          - { name: state_machine.guard, group: commerce_order }\n</code></pre> <p>The group argument allows the guard factory to only instantiate the guards relevant to a specific workflow group.</p> <p>The current state is stored in a StateItem field. A field setting specifies the used workflow, or a value callback that allows the workflow to be resolved at runtime (checkout workflow based on the used plugin, etc.). A validator is provided that ensures that the specified state is valid (exists in the workflow and is in the allowed transitions).</p> <p>If a transition has been applied, the StateItem field will dispatch several events on entity save. The pre_transition events are dispatched before the save (and allow the entity to be modified), while the post_transition events are dispatched after the save.</p>"},{"location":"commerce2/developer-guide/state-machine/#working-with-state-fields","title":"Working with state fields","text":"<p>Drupal Commerce uses State fields for two of its entities: Orders and Payments. You can learn more about Order workflows in the Orders documentation section. The Payments information structure documentation describes the states of Default and Manual Payment workflows. There are also examples of altering Payment workflows in the Payments code recipes and the State machine code recipes.</p> <p>In this documentation section, we will go through an example of creating a custom State field, workflow, and workflow group and continue to build out the example in the next two sections on Guards and Transition event subscribers.</p> <p>Our custom state field will be added to Order item entities, and we'll use it to track order fulfillment on a per-item basis. We are assuming that order items will be \"filled\" from inventory manually by administrative users. We'll also add in an option to \"backorder\" an item, if inventory is not currently available for that item. An order will not be complete until each of its items has either been filled or backordered.</p> <p>A custom \"State\" field can be created through the admin UI like any other custom field. Navigate to the \"Manage fields\" page for the \"Default\" order type at <code>admin/commerce/config/order-item-types/default/edit/fields</code> and click the \"Add field\" button to add a new \"State\" field. We'll name our new field \"Fulfillment state\" with machine ID: <code>field_fulfillment_state</code>. The number of allowed values for a State field should always be set to 1.</p> <p></p> <p>All that is fairly straightforward, but we have a problem. We cannot set a \"Workflow\" for the field since none are available for this entity type. If we were adding the custom field to a Payment type or Order type, we could use the workflows defined for those entities. But since we are creating a State field on an Order item type, we need to create a new custom workflow.</p> <p></p> <p>It is not possible to create a workflow through the admin UI, so we need to add its definition using a custom module. See the Drupal.org Creating custom modules documentation if you need help getting started. In this example, we'll assume we've created and installed a custom module named <code>mymodule</code>.</p> <p>We need to create both a custom workflow and a workflow group for our order item State field. Workflow and WorkflowGroup are plugins defined in YAML, similar to menu links.</p> <p>Our workflow group is defined in <code>mymodule.workflow_groups.yml</code>, a YAML file which should exist in the root folder of our custom module. We provide an ID for the workflow group on the first line and then define its Label and the entity type.</p> <pre><code>mymodule_order_item:\n  label: 'Order item'\n  entity_type: commerce_order_item\n</code></pre> <p>Now that we have a workflow group for Order item entities, we can create one or more workflows in <code>mymodule.workflows.yml</code>. Here is the definition for our order item fulfillment workflow. Notice that we reference the ID of the workflow group we just defined as the <code>group</code>. The <code>label</code> is what administrative users will see when selecting a workflow for a State field.</p> <pre><code>mymodule_order_item_fulfillment:\n  id: mymodule_order_item_fulfillment\n  group: mymodule_order_item\n  label: 'Order item fulfillment'\n  states:\n    unfilled:\n      label: 'Not filled'\n    filled:\n      label: Filled\n    backordered:\n      label: Backordered\n  transitions:\n    fill:\n      label: 'Fill item'\n      from: [unfilled, backordered]\n      to: filled\n    unfill:\n      label: 'Un-fill item'\n      from: [filled]\n      to:   unfilled\n    backorder:\n      label: 'Backorder item'\n      from: [unfilled]\n      to: backordered\n</code></pre> <p>Following <code>id</code>, <code>group</code>, and <code>label</code>, we have two sections which define our workflow: <code>states</code> and <code>transitions</code>. </p> <p>For each state, we simply define a label for each of the state IDs. The state IDs (<code>unfilled</code>, <code>filled</code>, <code>backordered</code>) will be used whenever we want to work with the workflow programatically. The state labels (\"Not filled\", \"Filled\", \"Backordered\") will be used when displaying state values through the admin UI.</p> <p>Defining the transitions can be trickier, if your workflow has any complex logic. Sketching out the states and transitions on paper with boxes and arrows can be helpful. For example, here is a diagram for our order item fulfillment workflow:</p> <p></p> <p>Notice that there are two separate arrows for the \"Un-fill\" and \"Fill\" transtions between the \"Not filled\" and \"Filled\" states. State transitions are always one-way, so we need a separate transition for each direction. Also, for any transition, there can only be exactly one \"to\" state. Since any transition can have multiple \"from\" states, those state IDs are defined with square brackets.</p> <p>After creating the workflow group and workflow YAML files, we just need to clear caches so that the configuration can be discovered. Now we can set the workgroup value for our custom Order item state field through the admin UI:</p> <p></p> <p>To see the new State field in action, create a new order and then edit it through the admin UI. We now have a Fulfillment state field on the order item with State options matching the ones defined for its workflow. If you update its state to \"Filled\" and then save, you will see that the options change the next time you edit the order item. Only \"Un-fill\" will be available as an option.</p> <p></p>"},{"location":"commerce2/developer-guide/state-machine/#state-transition-guards","title":"State transition Guards","text":"<p>The workflow set for a State field defines all the states and transitions that are available for that field. For example, the Commerce Order \"Fulfillment\" workflow has states: \"Draft\", \"Fulfillment\", \"Completed\", and \"Canceled\", with transitions: \"Place\", \"Fulfill\", and \"Cancel\". This diagram illustrates the states and transitions of the Order fulfillment workflow:</p> <p></p> <p>When an order is placed, either at checkout or through the admin UI, its State changes from \"Draft\" to \"Fulfillment\". After that, administrative users can manually transition the order's state to \"Completed\" or \"Canceled\". </p> <p></p> <p>But what if we wanted to add constraints to prevent administrative users from moving an Order from the Fulfillment state to Completed or Canceled under certain conditions? In the Custom state fields documentation, we created a custom State field for Order items, to track fulfillment on a per-item basis. We might want to prevent users from cancelling an order if any of its order items have already been \"filled\". And we might want to prevent users from transitioning an order to Completed if any of its items are still \"un-filled\". The State Machine module's state transition \"Guards\" provide the ability to incorporate this sort of business logic. State transition Guards limit the transitions available for a State field based on contextual information. Transitions can be restricted based on the current user's permissions, a parent entity field, etc.</p> <p></p> <p>Using Guards requires writing custom code. Specifically, you will need to write a tagged service that implements <code>Drupal\\state_machine\\Guard\\GuardInterface</code>. This interface defines a single method that returns a boolean TRUE/FALSE value:</p> <pre><code>public function allowed(WorkflowTransition $transition, WorkflowInterface $workflow, EntityInterface $entity);\n</code></pre> <p>If the given transition is allowed for the workflow, return <code>TRUE</code>; otherwise return <code>FALSE</code>.</p> <p>Here is an example Guard implementation that implements the business logic described above:</p> <pre><code>&lt;?php\n\nnamespace Drupal\\mymodule\\Guard;\n\nuse Drupal\\Core\\Entity\\EntityInterface;\nuse Drupal\\state_machine\\Guard\\GuardInterface;\nuse Drupal\\state_machine\\Plugin\\Workflow\\WorkflowInterface;\nuse Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition;\n\nclass FulfillmentOrderGuard implements GuardInterface {\n\n  public function allowed(WorkflowTransition $transition, WorkflowInterface $workflow, EntityInterface $entity) {\n    if ($transition-&gt;getId() == 'cancel') {\n      // Do not cancel orders with filled items.\n      foreach ($entity-&gt;getItems() as $order_item) {\n        if ($order_item-&gt;get('field_fulfillment_state')-&gt;first()-&gt;getId() == 'filled') {\n          return FALSE;\n        }\n      }\n      return TRUE;\n    }\n    if ($transition-&gt;getId() == 'fulfill') {\n      // All items must be filled or backordered. At least one must be filled.\n      $has_filled_item = FALSE;\n      foreach ($entity-&gt;getItems() as $order_item) {\n        $inventory_state = $order_item-&gt;get('field_fulfillment_state')-&gt;first()-&gt;getId();\n        if ($inventory_state != 'filled' &amp;&amp; $inventory_state != 'backordered') {\n          return FALSE;\n        }\n        $has_filled_item = $inventory_state == 'filled' ? TRUE : $has_filled_item;\n      }\n      return $has_filled_item;     \n    }\n\n    // All other transitions.\n    return TRUE;\n  }\n\n}\n</code></pre> <p>By itself, this <code>FulfillmentOrderGuard</code> class won't do anything. We need to add it to our custom module's <code>services.yml</code> file so that it can be discovered. The <code>group</code> argument allows the guard factory to only instantiate the guards relevant to a specific workflow group. In this case, we want the <code>commerce_order</code> group since our Guard is intended for the Commerce order <code>State</code> field:</p> <pre><code>services:\n  mymodule.fulfillment_order_guard:\n    class: Drupal\\mymodule\\Guard\\FulfillmentOrderGuard\n    tags:\n      - { name: state_machine.guard, group: commerce_order }\n</code></pre> <p>If we wanted to implement a Guard for the custom Order item \"Fulfillment state\" field we implemented in the Custom state fields documentation, the <code>group</code> value would change to match that custom workflow group:</p> <pre><code>  mymodule.fulfillment_order_item_guard:\n    class: Drupal\\mymodule\\Guard\\FulfillmentOrderItemGuard\n    tags:\n      - { name: state_machine.guard, group: mymodule_order_item }\n</code></pre>"},{"location":"commerce2/developer-guide/state-machine/#state-transition-event-subscribers","title":"State transition event subscribers","text":"<p>In the previous two sections, we created a custom Order item State field, Workflow and state transition Guard that could be used as parts of a custom Order fulfillment management system. Here we'll continue with that example and look at how event subscribers that react to State transition events can be used to provide custom business logic for your Drupal Commerce application.</p> <p>If you're unfamiliar with the concept of event subscribers, you may want to start with documentation provided by Drupal.org: - Subscribe to and dispatch events - EventSubscriber example</p> <p>The State machine module dispatches several events whenever a transition is applied to a State field. The two types of events are <code>pre_transition</code> phase and <code>post_transition</code> phase.</p> <ul> <li>Pre-transition phase events are dispatched right before the State field's entity is saved and allow the entity to be modified.</li> <li>Post-transition phase events are dispatched right after the State field's entity is saved.</li> </ul> <p>Both types of events provide methods that can be used by your event subscriber:</p> <pre><code>/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition $transition */\n$transition = $event-&gt;getTransition();\n\n/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowInterface $workflow */\n$workflow = $event-&gt;getWorkflow();\n\n/** @var \\Drupal\\Core\\Entity\\ContentEntityInterface $entity */\n$entity = $event-&gt;getEntity();\n\n/** @var string $state_field_name */\n$state_field_name = $event-&gt;getFieldName();\n\n/** @var \\Drupal\\state_machine\\Plugin\\Field\\FieldType\\StateItemInterface $state_field */\n$state_field = $event-&gt;getField();\n</code></pre> <p>When subscribing to a State transition event, you will specify pre- or post- transition as well as the type(s) of transitions you are targeting.</p>"},{"location":"commerce2/developer-guide/state-machine/#generic-state-transition-events","title":"Generic state transition events","text":"<p>The <code>state_machine.pre_transition</code> and <code>state_machine.post_transition</code> events are fired for any transition on any State field. They are useful for logging, notifications, and other use cases that require reacting to every transition regardless of the workflow group. For an example of generic (and other) state transition event subscribers, see the WorkflowTransitionEventSubscriber test code provided by the State machine module.</p>"},{"location":"commerce2/developer-guide/state-machine/#workflow-group-specific-state-transition-events","title":"Workflow group-specific state transition events","text":"<p>The pattern for workflow group-specific events is \"{$workflow_group_id}.{$phase}\", where {$workflow_group} is something like, <code>commerce_order</code> or <code>mymodule_order_item</code> and {$phase} is either <code>pre_transition</code> or <code>post_transition</code>.</p> <p>These events are useful for performing an action based on the \"to\" state, regardless of which transition made the change. You can get the \"to\" state and its ID from the event transition, like this:</p> <pre><code>/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowTransition $transition */\n$transition = $event-&gt;getTransition();\n\n/** @var \\Drupal\\state_machine\\Plugin\\Workflow\\WorkflowState $to_state */\n$to_state = $transition-&gt;getToState();\n\n$to_state_id = $to_state-&gt;getId();\n</code></pre>"},{"location":"commerce2/developer-guide/state-machine/#example-subscriber-to-log-all-order-item-fulfillment-events","title":"Example: subscriber to log all Order item fulfillment events","text":"<p>In Working with state fields, we created the <code>mymodule_order_item</code> custom workflow group for an Order item fulfillment state field. We can implement an event subscriber to log all transitions (for any workflow assigned to the group) by subscribing to the <code>mymodule_order_item.post_transition</code>, like this:</p> <pre><code>namespace Drupal\\mymodule\\EventSubscriber;\n\nuse Drupal\\state_machine\\Event\\WorkflowTransitionEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass OrderItemFulfillmentSubscriber implements EventSubscriberInterface {\n\n  public static function getSubscribedEvents() {\n    $events = [\n      'mymodule_order_item.post_transition' =&gt; 'onLogOrderItemTransition',\n    ];\n    return $events;\n  }\n\n  public function onLogOrderItemTransition(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $transition_id = $event-&gt;getTransition()-&gt;getId();\n    // Log order item transition here.\n  }\n\n}\n</code></pre> <p>Example code for logging an order item transition can be found in the Code recipes section of the Activity logs documentation.</p>"},{"location":"commerce2/developer-guide/state-machine/#transition-specific-state-transition-events","title":"Transition-specific state transition events","text":"<p>The pattern for workflow group-specific events is \"{$workflow_group_id}.{$transition_id}.{$phase}\". These transition-specific state transition events can be extremely useful for powering business logic in Drupal Commerce applications. </p> <p>For example, the event subscriber that sets order numbers when an order is placed subscribes to the <code>commerce_order.place.pre_transition</code> event: - <code>commerce_order</code> is the workflow group. - <code>place</code> is the transition. - <code>pre_transition</code> is the phase.</p> <p>Additionally, other event subscribers for the <code>commerce_order.place.pre_transition</code> event perform cart finalization operations and register coupon/promotion usage, and an event subscriber for the <code>commerce_order.place.post_transition</code> event does some address book management.</p>"},{"location":"commerce2/developer-guide/state-machine/#example-event-subscriber-to-manage-order-item-fulfillment","title":"Example: event subscriber to manage Order item fulfillment","text":"<p>In Working with state fields, we created a custom workflow for an Order item state field with <code>fill</code> and <code>unfill</code> transitions. In a custom inventory management system, we could implement event subscribers for the <code>mymodule_order_item.fill.pre_transition</code> and <code>mymodule_order_item.unfill.pre_transition</code> events to make the actual updates to inventory data, like this:</p> <pre><code>&lt;?php\n\nnamespace Drupal\\mymodule\\EventSubscriber;\n\nuse Drupal\\Core\\Entity\\EntityTypeManagerInterface;\nuse Drupal\\mymodule\\InventoryManagerInterface;\nuse Drupal\\state_machine\\Event\\WorkflowTransitionEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass OrderItemFulfillmentSubscriber implements EventSubscriberInterface {\n\n  /**\n   * The custom inventory manager.\n   *\n   * @var \\Drupal\\mymodule\\InventoryManagerInterface\n   */\n  protected $inventoryManager;\n\n  /**\n   * The log storage.\n   *\n   * @var \\Drupal\\commerce_log\\LogStorageInterface\n   */\n  protected $logStorage;\n\n  /**\n   * Constructs a new OrderItemFulfillmentSubscriber object.\n   *\n   * @param \\Drupal\\mymodule\\InventoryManagerInterface $inventory_manager\n   *   The inventory manager.\n   * @param \\Drupal\\Core\\Entity\\EntityTypeManagerInterface $entity_type_manager\n   *   The entity type manager.\n   */\n  public function __construct(InventoryManagerInterface $inventory_manager, EntityTypeManagerInterface $entity_type_manager) {\n    $this-&gt;inventoryManager = $inventory_manager;   \n    $this-&gt;logStorage = $entity_type_manager-&gt;getStorage('commerce_log');\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function getSubscribedEvents() {\n    $events = [\n      'mymodule_order_item.fill.pre_transition' =&gt; 'onOrderItemFill',\n      'mymodule_order_item.unfill.pre_transition' =&gt; 'onOrderItemUnFill',\n      'mymodule_order_item.post_transition' =&gt; 'onLogOrderItemTransition',\n    ];\n    return $events;\n  }\n\n\n  /**\n   * Executes the actual inventory transaction for the order item fill.\n   *\n   * @param \\Drupal\\state_machine\\Event\\WorkflowTransitionEvent $event\n   *   The event.\n   */\n  public function onOrderItemFill(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $this-&gt;inventoryManager-&gt;fillOrderItem($order_item);\n  }\n\n  /**\n   * Executes the inventory transaction for un-filling the order item.\n   *\n   * @param \\Drupal\\state_machine\\Event\\WorkflowTransitionEvent $event\n   *   The event.\n   */\n  public function onOrderItemUnFill(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $this-&gt;inventoryManager-&gt;unfillOrderItem($order_item);\n  }\n\n  /**\n   * Log all order item fulfillment transitions to the parent order.\n   *\n   * @param \\Drupal\\state_machine\\Event\\WorkflowTransitionEvent $event\n   *   The transition event.\n   */\n  public function onLogOrderItemTransition(WorkflowTransitionEvent $event) {\n    /** @var \\Drupal\\commerce_order\\Entity\\OrderItemInterface $order_item */\n    $order_item = $event-&gt;getEntity();\n\n    $transition_id = $event-&gt;getTransition()-&gt;getId();\n    $this-&gt;logStorage-&gt;generate($order_item-&gt;getOrder(), 'order_item_' . $transition_id, [\n      'order_item_id' =&gt; $order_item-&gt;id(),\n    ])-&gt;save();\n  }\n\n}\n</code></pre> <p>In the above example, the \"inventory manager\" is not an actual Drupal Commerce service. You would need to implement your own custom service to manage updates to inventory with <code>fillOrderItem()</code> and  <code>unfillOrderItem()</code> or similar methods.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/","title":"Displaying products","text":"<p>Learn techniques for displaying products on your site.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-display-pages","title":"Product display pages","text":"<p>This section describes how to customize the product pages that are displayed on your site. We will look at how to manage configuration for products and variations using the Manage display form for product types.</p> <p></p> <p>Prerequisite is creating the Simple product type</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-variation-field-injection","title":"Product variation field injection","text":"<p>When a product type is created, the, Inject product variation fields into the rendered product configuration setting is enabled by default. To see what that setting does, let's start by disabling product variation field injection for the Simple product type, using its Edit form.</p> <p></p> <p>In the following image, we have the Manage display configuration form for the Simple product type on the left. To the right, we have a Simple product as it's displayed on the site. You can see that the order of the fields matches up, and labels are displayed as expected.</p> <p>The Add to cart form formatter is used by default for the Variations field, to display an Add to cart button instead of variations data (like title, price, and attributes). Configuration for the Add to cart form formatter is explained in the next section.</p> <p></p> <p>But what if you want the Add to cart button/form and variations data displayed on your product page? That's what the product variation field injection setting gives you. Enable the setting, and you'll see additional fields that come from the Manage display configuration for the Product variation type. This is the same Simple product with product variation field injection enabled:</p> <p></p> <p>The fields from the Product variation type display are combined with those of the Product type display. At this point, you may be wondering how to control the positions of the Product variation fields, in relation to the Product fields. When a product is rendered, all the product and product variation fields are sorted based on weight. To control the field positions, you should use the Show row weights link to explicitly set the weight for each field. This link is located at the top-right of each Manage display configuration form.</p> <p>In this image, the Manage display configuration form for the Simple Product type is on the left; the Manage display configuration form for the Simple Product variation type is on the right. Show row weights has been enabled. The weight values have been set so that the Product variation Images field is displayed after the Product Title field, and the Product variation Price field is displayed after the Product Body field.</p> <p></p>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-variation-field-injection-with-multiple-variations","title":"Product variation field injection with multiple variations","text":"<p>In the previous section, we looked at product variation field injection for the Simple product type, which is a product type with no attributes and only a single variation per product. For product types with attributes and multiple variations, the values that are rendered for the product variation correspond to the currently selected product variation.</p> <p>In this example, we have a Product type with two attributes, Color and Size. The Drupal Commerce Hoodie has a price of $52.00 for Size Small and $62.00 for Size Medium. When the selected product variation is changed from the default Blue / Small to Green / Medium, both the Product variation Image and Product variation Price fields are updated on the displayed page.</p> <p></p> <p>In the next section, we'll look at how you can customize the Add to cart form.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#add-to-cart-form","title":"Add to cart form","text":"<p>The Add to cart form allows customers to select a specific variation of a product and add that item to their Cart. In this section, we describe:</p> <ul> <li>How to add the Add to cart form to a product display page</li> <li>How to configure the form with specific examples for adding a Quantity field and fields for Customizable products</li> <li>How to add an Add to cart form to a custom content type page</li> </ul> <p></p>"},{"location":"commerce2/developer-guide/products/displaying-products/#add-the-add-to-cart-form-to-your-product-display","title":"Add the Add to cart form to your product display","text":"<p>In the previous section, we looked at how to customize product pages using the Manage display configuration form for product types. To include the Add to cart form on your product display, make sure the Variations field is enabled and set its Formatter to Add to cart form. This formatter has a single configuration option: Combine order items containing the same product variation.</p> <ul> <li>If this setting is enabled, then whenever an item is added to the cart, existing items in the cart will be checked for matches. If a matching item is found, the quantity and price of that item will be increased.</li> <li>If the setting is not enabled, then any item added to the cart will appear in the cart and in the final order as a separate line item.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#configuring-the-add-to-cart-form-fields","title":"Configuring the Add to cart form fields","text":"<p>The Add to cart form is implemented as a variant of the Order item content entity form.</p> <p> If you do not know which Order item type is used for your Product type, you can identify it by following these steps:</p> <ol> <li>Navigate to the Product types listing at <code>/admin/commerce/config/product-types</code></li> <li>Click the product variation type link for your product type.</li> <li>On the product variation type Edit form, identify the Order item type.</li> </ol> <p>Once you've identified the correct Order item type for your Product type, navigate to the Manage form display configuration form for that type and then select the Add to cart form display option.</p> <p></p> <p>By default, Purchased entity is the only field enabled for the form. That field provides a mechanism for customers to select a product variation to be add to their cart.</p> <p>If you would like to allow customers to enter additional information when adding items to the cart, enable the relevant fields here. For example, if the Quantity field is Disabled, then whenever a customer clicks the Add to cart button, 1 unit of the selected item will be automatically added. To allow customers to specify quantities other than 1 when they select an item: 1. Drag the Quantity field up and out of the Disabled section. 2. Select a Widget type for the Quantity field. 3. Click the Save button.</p> <p>The Quantity field now appears on the Add to cart form for this product type. </p>"},{"location":"commerce2/developer-guide/products/displaying-products/#add-fields-for-customizable-products","title":"Add fields for customizable products","text":"<p>If you have products with customization options, you can add fields to the Order item type, using the Manage fields form. Then add those fields to the Add to cart form for the Order item type. For example, a Monogram textfield has been added to the Add to cart form for this Order item type:</p> <p></p> <p></p>"},{"location":"commerce2/developer-guide/products/displaying-products/#customize-the-purchased-entity-field","title":"Customize the Purchased entity field","text":"<p>There are two widget options for the Purchased entity field: - Product variation attributes - Product variation title</p> <p>Product variation attributes is the default widget, and it's the one that's been used for all the example images on this page. It renders the Add to cart form with an element for each attribute individually. (For example, Color and Size.) The details of how this works and configuration options will be covered in the next section.</p> <p>Product variation title is a simpler widget option. It displays all available product variation options in a select element. The only configuration option is the label for the select element. The default label is Please select and can be hidden. Here is how the same Add to cart form pictured above looks when the widget is changed to Product variation title. (The Add to cart button is beneath the select element.)</p> <p></p> <p>Both widgets allow custom modules to apply their own filtering to the list of available product variations by subscribing to the <code>ProductEvents::FILTER_VARIATIONS</code> event. For more information on writing event subscribers in Drupal 8, Drupal 8 Event Subscribers - the successor to alter hooks and Drupal 8: Hooks, Events, and Event Subscribers are good introductory articles. The Code Recipes section of the Products documentation also contains an example.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#add-the-add-to-cart-form-to-a-custom-content-type-page","title":"Add the Add to cart form to a custom content type page","text":"<p>You can add the Add to cart form to a custom content type by adding an Entity reference field that references entity type Product and then configuring the display using any of the techniques described in Product display pages and on this Add to cart documentation page. Here is an example for adding the Add to cart form to the Article content type.</p> <ol> <li> <p>Navigate to the Manage fields form for the Article content type and click the Add field button: <code>/admin/structure/types/manage/article/fields</code></p> </li> <li> <p>Select Reference &gt;&gt; Other... as the field type. On the next page, select Product as the Type of item to reference.</p> </li> </ol> <p></p> <ol> <li> <p>If you have multiple product types, specify the product type(s) to reference on the next page.</p> </li> <li> <p>Navigate to the Manage display form for the Article content type and select Rendered entity for the Product field formatter: <code>/admin/structure/types/manage/article/display</code>. (You may also want to hide the field's label.)</p> </li> <li> <p>If you want to use a View mode other than the default, configure the Rendered entity formatter by specifying an alternative View mode.</p> </li> </ol> <p></p> <ol> <li>For each product type specified in step #3, navigate to the Manage display form for the View mode specified in step #5. The Variations field should be enabled, with Add to cart form selected as its formatter.</li> </ol> <p></p> <p>In the next section, we'll look at configuration options for displaying a product's attributes, such as Color and Size.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-attributes","title":"Product attributes","text":"<p>This section describes how you can modify the product attributes that appear on the Add to cart form to do things like display a color swatch instead of just a color name for a customer to select.</p> <p></p> <p>In the Add to cart form documentation, we looked at the difference between the Product variation attributes widget and the Product variation title widget. To customize the display of individual product attributes, like Color or Size, the Product variation attributes widget must be selected on the Add to cart form display for the product's order item type.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-attribute-element-types","title":"Product attribute element types","text":"<p>There are three options for how a product attribute is displayed on the add to cart form. The first two options, radio buttons and select list, simply display the Name of each value for the attribute. In the image above, the Size attribute values are displayed with the Select list element type. It is the third option, Rendered attribute, that provides functionality for displaying attributes in alternative ways.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#rendered-attribute-element-type","title":"Rendered attribute element type","text":"<p>The rendered attribute element type works by using the Add to Cart Form view display mode for the product attribute. (The default display mode for the product attribute is used if the Add to Cart Form display mode is not explicitly enabled.)</p> <p>To access this administrative UI, navigate to your list of Product attributes at <code>/admin/commerce/product-attributes</code> and click the Edit button for the product attribute. Select Rendered attribute for the Element type and then click the Save button at the bottom of the page.</p> <p></p> <p>Next, navigate to the Manage display tab, where you'll see the Name field as well as any additional fields you added for this product attribute. Here we've left the Color product attribute (that we created in the ..docs) configured with its defaults. You can see that the Name field label is hidden, but the Color field label is displayed above the color text, which is displayed as its hex value.</p> <p></p> <p>To get the color swatches appearing as we'd like, we'll move the Name field to he Disabled section, hide the Color field label, change its Format to Color swatch, and adjust its configuration like this:</p> <p></p> <p>A similar approach can be taken for displaying an attribute as an image:</p> <ol> <li>Add an Image field to the product attribute.</li> <li>Select Rendered attribute as the Element type.</li> <li>Configure the attribute's display so that only the image field is rendered.</li> </ol> <p>In the next section, we'll learn about theming Drupal Commerce products, variations, and product attribute values.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#theming","title":"Theming","text":"<p>If you need to customize layouts for your product displays beyond what is possible using the administration UI, you can use Twig templates as part of a custom theme. Theming is an advanced topic beyond the scope of this Drupal Commerce documentation guide. For an overview, please see the Theming Drupal Guide on Drupal.org. This documentation page serves as a reference for theming Drupal Commerce products, variations, and product attribute values.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#theming-product","title":"Theming product","text":"<p>The default product template is commerce-product.html.twig</p> <ul> <li>The product template will be used for product pages and product fields displayed with the Rendered entity formatter.</li> <li>Use Manage display for your product type to make sure that all the fields you want displayed are enabled for the active display mode. (The Default display mode is used for product pages; display mode is a configuration option for rendered entities.)</li> <li>If you want to display variation fields, product variation field injection should be enabled. Also, make sure that all the variation fields you want displayed are enabled for the Default display mode for the variation type.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#available-variables","title":"Available variables","text":"<ul> <li>attributes: HTML attributes for the wrapper. (not to be confused with product attributes**)</li> <li>product_entity: The product entity.</li> <li>product_url: The product URL.</li> <li>product: The rendered product fields.</li> <li>Use <code>{{ product }}</code> to print them all.</li> <li>Use <code>{{ product.title }}</code>, for example, to print a single field.</li> <li>Use <code>{{ product|without('title') }}</code>, for example, to exclude the printing of a given field.</li> <li>Product attribute fields are grouped so that they can be excluded together; use <code>{{- product|without('variation_attributes') -}}</code> to exclude the printing of product attribute fields.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-level-field-variables","title":"Product-level field variables","text":"<ul> <li>product.title</li> <li>product.body</li> <li>unless the Body field has been deleted for the product type</li> <li>product.variations</li> <li>product.uid</li> <li>for the product Author field</li> <li>product.created</li> <li>product.stores</li> <li>For each added product field:</li> <li>product.field_added_field_name</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-variation-level-field-variables","title":"Product variation-level field variables","text":"<ul> <li>product.variation_title</li> <li>product.variation_sku</li> <li>product.variation_price</li> <li>product.variation_list_price</li> <li>For each added product variation field:</li> <li>product.variation_field_added_field_name</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#theming-product-variations","title":"Theming product variations","text":"<p>The default product template is commerce-product-variation.html.twig</p> <ul> <li>If you are using the Add to cart form formatter to display your product's variations, this template will not be used.</li> <li>This template will be used whenever the Rendered entity formatter is selected for a product variations field.</li> <li>Use Manage display for your product variation type to make sure that all the fields you want displayed are enabled for the rendered entity's display mode.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#available-variables_1","title":"Available variables","text":"<ul> <li>attributes: HTML attributes for the wrapper. (not to be confused with product attributes**)</li> <li>product_variation_entity: The product variation entity.</li> <li>product_url: The product URL.</li> <li>product_variation: The rendered product variation fields.</li> <li>Use <code>{{ product_variation }}</code> to print them all.</li> <li>Use <code>{{ product_variation.title }}</code>, for example, to print a single field.</li> <li>Use <code>{{ product_variation|without('title') }}</code>, for example, to exclude the printing of a given field.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-variation-field-variables","title":"Product variation field variables","text":"<ul> <li>product_variation.title</li> <li>product_variation.sku</li> <li>product_variation.price</li> <li>product_variation.list_price</li> <li>product_variation.product_id</li> <li>for the variation's product</li> <li>For each attribute:</li> <li>product_variation.attribute_name</li> <li>For each added field:</li> <li>product_variation.field_added_field_name</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#theming-product-attribute-values","title":"Theming product attribute values","text":"<p>The default product attribute template is commerce-product-attribute-value.html.twig</p> <ul> <li>This template will be used whenever the Rendered attribute formatter is selected for a product variations field.</li> <li>Use Manage display for your product attribute to make sure that all the fields you want displayed are enabled for the Add to Cart Form display mode.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#available-variables_2","title":"Available variables","text":"<ul> <li>attributes: HTML attributes for the wrapper.</li> <li>product_attribute_value_entity: The product attribute value entity.</li> <li>product_attribute_value: The rendered product attribute value fields.</li> <li>Use <code>{{ product_attribute_value }}</code> to print them all.</li> <li>Use <code>{{ product_attribute_value.name }}</code>, for example, to print a single field.</li> <li>Use <code>{{ product_attribute_value|without('name') }}</code>, for example, to exclude the printing of a given field.</li> </ul>"},{"location":"commerce2/developer-guide/products/displaying-products/#product-attribute-value-field-variables","title":"Product attribute value field variables","text":"<ul> <li>product_attribute_value.name</li> <li>For each added field:</li> <li>product_attribute_value.field_added_field_name</li> </ul> <p>Also, there is a custom css library for rendered product attributes, located within the Drupal Commerce Product module: <code>css/commerce_product.rendered-attributes.css</code>. There are two classes attached to the rendered product attribute element that can be targeted with custom styling:</p> <ul> <li><code>product--rendered-attribute</code></li> <li><code>product--rendered-attribute__selected</code></li> </ul> <p>In the next section, we'll look at how you can create a page that displays multiple products with multiple add to cart forms.</p>"},{"location":"commerce2/developer-guide/products/displaying-products/#links-and-resources","title":"Links and resources","text":"<ul> <li>Changing Content Display (Drupal user guide)</li> <li>Add to cart form documentation</li> <li>Product attributes</li> </ul>"},{"location":"commerce2/developer-guide/products/getting-started/","title":"Getting started","text":"<p>If you are evaluating Drupal Commerce as a potential ecommerce solution, this section will help you decide whether Drupal Commerce can meet your needs concerning how you can organize, maintain, and display your product-related information. If you are a site builder or developer, step-by-step instructions and explanations will help you get started with setting up products in your Drupal Commerce site.</p> <p>Before you begin adding products to your Drupal Commerce store, it is important to understand the product structure. Let's go through an example.</p> <p>Let us say that your store sells t-shirts. Your t-shirts come in various sizes; such as small, medium, and large. Each shirt has a graphic but can come in different colors. Each graphic t-shirt is its own product but has variations of sizes and colors available.</p> <p></p> <p>How does that translate into Drupal Commerce?</p> <ul> <li>There is a t-shirt product type.</li> <li>There is a size product attribute.</li> <li>There is a color product attribute.</li> <li>Each graphic t-shirt will be its own product, with variations of color and size.</li> </ul> <p>The following table is an example of variations that could exist for a Drupal Commerce \"Drupalcon\" graphic t-shirt, corresponding to the above image.</p> Product Size Color Drupalcon graphic Small Green Drupalcon graphic Medium Blue Drupalcon graphic Medium Orange Drupalcon graphic Large Blue Drupalcon graphic Large Blue Drupalcon graphic Large Orange Drupalcon graphic Large Red <p>How is this data represented in Drupal Commerce?</p> <ul> <li>There is a single Drupalcon graphic product.</li> <li>This product has 7 different product variations.</li> <li>The size product attribute has 3 different product attribute values: Small, Medium, and Large.</li> <li>The color product attribute has 4 different product attribute values: Green, Orange, Red, and Blue.</li> </ul> <p>In the next section, we'll go through the Drupal Commerce product structure concepts and terminology in greater detail.</p> <p>This section describes Drupal Commerce products at a conceptual level. For step-by-step instructions for setting up products for your site, see the Product Architecture documentation. For more specific, technical explanations of the product-related data structures and relationships, see the Product Information Structure documentation.</p>"},{"location":"commerce2/developer-guide/products/getting-started/#terminology","title":"Terminology","text":"<p>The following is an introduction to terminology used in Drupal Commerce products.</p> Term What does it mean? Add to cart form While not strictly a term, you'll find, \"add to cart form\" mentioned throughout the product documentation. When developing your Drupal Commerce site, you'll genreally want to include the add to cart form on pages of your site that display products. The add to cart form allows customers to select a specific variation of a product and add that item to their shopping cart. Attribute A product attribute is something about the product which creates a unique choice. For clothing this would be the color and size. A subscription may have monthly or annual billing options. Attribute value A product attribute value is one distinct choice for an attribute. For example, attribute values for a color attribute might be red, blue, yellow, and green. Product The actual product, such as a sweatshirt or the book \"Moby Dick\", which contains all of its variations. Every product has at least one variation. Product type A product type, like clothing or a book, defines a group of products. Every product has exactly one product type, and each product type has exactly one variation type. Drupal Commerce does not provide a set list of product types; instead, you are free to create whatever product types work best for your products. Variation A product variation represents an option of specific attributes for a product. For example, the Large Blue sweatshirt versus the Medium Red sweatshirt. Or the paperback or hardcover version of a book. This is what is purchased and has a price. It has a sku that must be unique across all products and variations. Variation type A product variation type defines the set of attributes applicable to the products of that type. For example, a sweatshirt variation type might have size and color as its attributes. A book variation type might have format as its only attribute."},{"location":"commerce2/developer-guide/products/getting-started/#concepts","title":"Concepts","text":""},{"location":"commerce2/developer-guide/products/getting-started/#product-skus-what-are-they-and-why-are-they-important","title":"Product SKUs -- What are they and why are they important?","text":"<p>SKU stands for \"stock keeping unit\" and is a unique code that identifies the products you sell. Companies that are direct manufacturers may use MPNs, or \"manufacturing part numbers\", instead of SKUs (but they'll still be called \"SKUs\" in Drupal Commerce).</p> <p>For stores that sell physical products, SKUs are critically important for inventory management. A complete list of all product SKUs along with a quantity value for each provides the information you need to monitor stock levels. What about stores that sell non-physical products, like services or virtual products, for which there may be unlimited inventory? You still need SKUs. SKUs are important for sales and financial reporting for all types of products. The SKU is your unique identifier for each product.</p> <p>If you already have a well-defined list of products, each with a SKU, price, and other data fields, then you probably don't need to spend too much time thinking about SKUs. As long as each SKU is unique, you're good. However, in other cases, creating the template/structure for your product SKUs may be one of your first product-related design decisions. In Drupal Commerce, SKUs can be any strings up to 255 characters long, but typically, you will want to keep your SKUs as short and simple as possible. Also, avoid spaces and special characters, and be consistent with your format.</p> <p>In the context of developing a Drupal Commerce site, properly defining your product SKUs will help you design the structure of your products. In Drupal Commerce, every product SKU corresponds to exactly one product variation.* In the most basic terms, a product variation is the thing you're selling. It has a SKU, a price, a name/title, and a status (active/inactive). When a customer adds an item to a cart, he's adding a specific quantity of a product variation***.</p>"},{"location":"commerce2/developer-guide/products/getting-started/#drupal-commerce-products-and-product-variations","title":"Drupal Commerce products and product variations","text":"<p>In Drupal Commerce, every product has at least one product variation, and every product variation belongs to exactly one product. For some types of products, you may have a one-to-one correlation between products and product variations. For example, if you sell books in a single electronic format, each book you sell will be a product with a single variation; the customer will be presented with a simple Buy now button to purchase a book. There are no other options.</p> <p>In contrast, suppose some of your books are offered in multiple formats (Hardcover, Paperback, Large print, etc). For each book you sell, the customer should be presented with a way to specify the format they want to receive, and changing the format might also change the price. For each book product, there are now multiple product variations, each with its own SKU, price, and specific format.</p> <p>In Drupal Commerce, we refer to variation differentiators like the format in this example as product attributes. The various options available for the attribute are product attribute values (for example, Hardcover, Paperback, Large print, etc.).</p>"},{"location":"commerce2/developer-guide/products/getting-started/#product-attributes-and-product-attribute-values","title":"Product attributes and product attribute values","text":"<p>Whenever a product has multiple product variations, you need to define one or more product attributes for the distinguishing characteristic(s) of those product variations. In our book example, we defined a format product attribute. Other common product attributes are color and size.</p> <p>For each product attribute, you will also define a specific list of all possible product attribute values. For Book products, the list of Format product attribute values might include: Hardcover, Paperback, Kindle Edition, Large Print, Audio CD, and Board Book. (The list of product attribute values defined for a product attribute can be added to and updated over time.)</p> <p>Note that for any specific product, you may only have product variations for a subset of all the possible product attribute values. You may sell a book that's only offered in Hardcover. In that case, the book product will have only a single product variation. Another book product might have 6 or more product variations, one for every possible Format.</p>"},{"location":"commerce2/developer-guide/products/getting-started/#customizable-products","title":"Customizable products","text":"<p>What about customizable products? Suppose you sell a Writing Journal that comes in a variety of colors with a title on the cover that's either \"My Journal\" or includes a specific name, like \"John's Journal\". To start, you'd create one product attribute for Color with all available color options as its values.</p> <p>Do you also need a product attribute for Name? Well, it depends... are you going to carry stock for writing journals pre-printed with some of the most common names? John's Journal, Mary's Journal, Luke's Journal, Anna's Journal... If so, then yes, you'd create a SKU for every color/name combination you offer. And you'd create a product attribute for Name with a list of specific names as its values.</p> <p>What about names for which you're not going to carry stock? For those, you can create an additional Name product attribute value, called \"Other\" (or \"Custom\") and then provide a way for customers to enter a name when they purchase a product. (See the Add to cart form documentation for more information on how to set this up.) You'll create a SKU and a product variation for the \"Other\" Name attribute value in each of the available colors.</p> <p>Alternatively, suppose you're only going to carry stock for writing journals in each available color, with no pre-printed titles. In that case, you'll only need a single product attribute for Color. The name to be used for the titles will not be a product attribute; instead, it will be an extra order item field, stored with the order data.</p>"},{"location":"commerce2/developer-guide/products/getting-started/#product-types-product-variation-types-and-product-attributes","title":"Product types, product variation types, and product attributes","text":"<p>Suppose our store sells both traditional books (in a variety of formats) and Customizable Writing Journals (in a variety of colors), as described in the examples above. In Drupal Commerce terminology, these are two different product types, each with a corresponding product variation type.</p> <ul> <li>When customers buy a traditional book, they will specify its Format. The Traditional book product variation type will have Format as its only product attribute. And the Traditional book product type will have product variations of type Traditional book.</li> <li>When customers buy a journal, they will specify its Color and a Name for the title. The Writing journal product variation type will have Color and Name as its product attributes. And the Writing journal product type will have product variations of type Writing journal.</li> </ul> <p>Just as you can define any product attributes you need to match your specific products, you can define your own product and product variation types. In Drupal Commerce, there isn't a set of predefined \"product types\". You are free to create as many product types as you need to precisely define your products. The Product Architecture documentation describes a variety of approaches to product architecture.</p> <p>When you first create a Drupal Commerce site, you will see a Default product type and a Default product variation type. You can use these types as is, customize them, or delete them from your site completely. If you have a homogenous list of products, you may not need to create any custom product/variation types; the default types may be sufficient. If you do not customize the Default product type, as provided by Drupal Commerce, in any way, then your administrative users will add and edit products using a form that looks like this:</p> <p></p> <p>If you would like to customize the forms used to enter products, see the Editing products page in the Product Management documentation.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/","title":"Product architecture","text":"<p>Documentation in this section describes various approaches to product architecture. Learn how to structure your product types to best suit your specific business logic needs.</p> <ul> <li>Simple product type</li> <li>Product type with attributes</li> <li>Product with categories</li> <li>Most common product achitectures</li> <li>Multilingual products</li> </ul>"},{"location":"commerce2/developer-guide/products/product-architecture/#simple-product-type","title":"Simple product type","text":"<p>In this section, we're going to walk through the steps involved in creating a simple product type, one that has a single variation per product. We'll also add an image field for our variation type.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#create-a-product-type","title":"Create a product type","text":"<p>To create a new product type: 1. Navigate to the Product types listing at <code>/admin/commerce/config/product-types</code> 2. Click the Add product type button. 3. Enter \"Simple\" for the Label. 4. Disable the Allow each product to have multiple variations option. 5. Click the Save button.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#product-type-configuration-options","title":"Product type configuration options","text":""},{"location":"commerce2/developer-guide/products/product-architecture/#label","title":"Label","text":"<p>This is the name of the product type. The label field is only used for administrative purposes and will not be visible to end users.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#description","title":"Description","text":"<p>The description field is also only used for administrative purposes. It is displayed underneath the product type  on the Add product page, located at <code>/product/add</code>. If your store will have many different product types, entering a description for each can be helpful for product management.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#product-variation-type","title":"Product variation type","text":"<p>Typically, each product type will have its own corresponding variation type, and you can create both the product type and product variation type at the same time, by selecting Create new for the product variation type on the Add product type form.</p> <p>However, it is possible for a single product variation type to be used by multiple product types. In that situation, you could select an existing product variation type to be used by the product type you're creating. For example, suppose all your product variations need only the basic title/sku/price fields, but some of your products are manufactured internally while others are outsourced. You might need a variety of different product-level fields in this situation. You could also have different product types because of different marketing needs.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#allow-each-product-to-have-multiple-variations","title":"Allow each product to have multiple variations","text":"<p>This setting affects how product variation data is entered by administrative users. If enabled, product variations are edited in a form separate from the main product edit form. If a product has only one variation, it can be edited directly on the product data entry form. See the Editing products documentation for more information on product forms.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#inject-product-variation-fields-into-the-rendered-product","title":"Inject product variation fields into the rendered product","text":"<p>This setting affects how products are displayed for end users. You can learn more about product variation field injection in the Displaying products section of the documentation.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#publish-new-products-of-this-type-by-default","title":"Publish new products of this type by default","text":"<p>Published is an option on the data entry form for products and can be checked (published) or unchecked (not published), by default. Also, it is possible to remove the published setting from the product form completely (for all or just a subset of administrative users). You can learn more about the product data entry form configuration options in the Product management section of the documentation.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#configure-a-product-variation-type","title":"Configure a product variation type","text":"<p>To access the configuration form for a product variation type, you can either navigate to the Product variation types listing at <code>/admin/commerce/config/product-variation-types</code> or use the Product variation type links on the Product types listing at <code>admin/commerce/config/product-types</code>.</p> <p>On the Product types listing page, click the link for the Simple product variation type to configure the product variation-level options for the Simple product type.</p> <p></p> <p>If you have not created any Product attributes, you should see a configuration form that looks like this: </p> <p>Select the Generate variation titles based on attribute values setting to keep the data entry for our Simple product type as simple as possible. Click the Save button to save the updated product variation type configuration.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#product-variation-type-configuration-options","title":"Product variation type configuration options","text":""},{"location":"commerce2/developer-guide/products/product-architecture/#label_1","title":"Label","text":"<p>By default, the label for a product variation type is the same as the label for the product type, but the labels do not need to be the same. The label is the name of the product variation type. The label field is only used for administrative purposes and will not be visible to end users.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#generate-variation-titles-based-on-attribute-values","title":"Generate variation titles based on attribute values","text":"<ul> <li>If this option is not selected, the Title field will be shown on the product variation data entry as a required field.</li> <li>If this option is selected, the Title field will not be shown on the data entry form for the product variation. Instead, the value for the product variation title will be automatically generated:</li> <li>For a single-variation product type like our Simple product type, there are no attributes. The title of the product will also be used as the title for its product variation.</li> <li>For product variation types with attributes, the generated title is the product title followed by a dash (-) and then a comma-separated list of its attribute values. For example, \"Drupal Commerce Hoodie - Blue, Small\" or \"Drupal Commerce Hoodie - Green, Large\".</li> </ul>"},{"location":"commerce2/developer-guide/products/product-architecture/#traits","title":"Traits","text":"<p>If you have commerce-related contributed modules installed, you may see additional configuration options. For example, the Commerce shipping module will add a Shippable trait. See the documentation for the contributed modules for information about these traits.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#order-item-type","title":"Order item type","text":"<p>When a product variation is added to the cart, it is added as a new line item. The order item type defines the structure of this line item. (See the order items documentation.)</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#attributes","title":"Attributes","text":"<p>If you have defined product attributes, they will be listed here. Select any attributes that are applicable to your product variation type.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#add-images-to-a-product-variation-type","title":"Add images to a product variation type","text":"<p>Custom fields of a variety of types can be added to your product variations. To add a field for one or more images to your Simple product variation type:</p> <ol> <li>Navigate to the Manage fields page for the Simple product variation type: <code>/admin/commerce/config/product-variation-types/simple/edit/fields</code></li> <li>Click the Add field button.</li> <li>Select field type Image (under Reference). (If you do not see Image as an option, make sure that the Drupal core Image module is enabled.)</li> <li>Enter \"Images\" for the Label.</li> <li>Click the Save and continue button.</li> </ol> <p></p> <p>On the Field settings configuration page:</p> <ol> <li>Change the Allowed number of values from Limited to Unlimited. Product variations of type Simple can have 1 or more images.</li> <li>Click Save field settings to continue.</li> </ol> <p>You can use the default values for the rest of the Image field settings. If you are interested in learning more about the Image field settings options, see the Drupal 8 documentation for Working with images, which is currently out of date. Until it has been updated, you may find this Image Media Type Manage Fields Tab documentation more helpful.</p> <p></p> <p>On the Image settings for Simple configuration page:</p> <ol> <li>Select the Required field option to make images required for product variations of type Simple.</li> <li>Change the File directory to \"product-images\".</li> <li>Deselect the Alt field required setting (to simplify data entry for this demonstration setup).</li> <li>Click the Save settings button to finish configuring the new Images field.</li> </ol> <p></p> <p>Images can now be uploaded for Simple product variations and displayed on product pages. See Product display pages for documentation on customizing product displays.</p> <p>You can use this same general approach to add other fields to both product and product variation types.</p> <p>In the next section, we'll look at creating a more complex product type, with product attributes and multiple variations per product.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#product-type-with-attributes","title":"Product type with attributes","text":"<p>If your products have options like size, color, format, or package size, then you need to create product attributes and their values. For example, suppose you are selling a t-shirt that comes in a variety of sizes and colors. Then you need to create a Size attribute (with values like, \"Small\", \"Medium\", and \"Large\"), and you need to create a Color attribute (with values like \"Red\", \"Blue\", \"Orange\", and \"Green\").</p> <p></p> <p>As the above image suggests, a product with a particular set of attributes will not necessarily have a variation for every possible combination. Perhaps the size Large t-shirt is only available in Green, and the Medium t-shirt is only available in Blue and Orange. Product attribute values do not define the complete set of product variations; rather they define a set of possible attribute combinations available to product variations.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#create-a-basic-product-attribute","title":"Create a basic product attribute","text":"<p>Let's start by creating a Size attribute with values Small, Medium, and Large.</p> <ol> <li>Navigate to the Product attributes page by using the menu item under the main Commerce menu or <code>/admin/commerce/product-attributes</code>.</li> <li>Enter \"Size\" for the Name.</li> <li>Select Select list for the Element type. See Product attributes in the Displaying products documentation for a description of how these options affect product displays.</li> <li>Do not select any Product variation types. This Size attribute will not be used for the Default or Simple product types. When we create a new Clothing product type (below), we can come back to update the configuration.</li> <li>Click the Save button to create the new product attribute.</li> </ol> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#create-product-attribute-values","title":"Create product attribute values","text":"<p>On the Size product attribute configuration form, add \"Small\", \"Medium\", and \"Large\" as values.</p> <ol> <li>Enter \"Small\" for the Name.</li> <li>Click the Add value button. A new text field will appear in the list.</li> <li>Enter \"Medium\".</li> <li>Repeat steps 2 and 3 to enter \"Large\" as the third value.</li> <li>Click the Save button.</li> </ol> <p></p> <p>You can use the drag-and-drop handle in the leftmost column, the Reset to alphabetical button, or the Show row weights link and Weight select lists to reorder the values. This order will be used on the form used to enter product variation data.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#add-a-product-attribute-to-a-product-variation-type","title":"Add a product attribute to a product variation type","text":"<p>In the Simple product type documentation, we created a product type named, Simple. Use the same procedure to create a new product type named, Clothing, with a corresponding Clothing product variation type. Be sure to enable the Allow each product to have multiple variations setting, since this product type will have multiple variations. When you add the Images field to the product variation type, you can re-use the existing Image field instead of creating a new one:</p> <p></p> <p>If you look at the configuration form for any product variation type, you'll see that a new Attributes section has been added, with a checkbox for the new Size product attribute. Select this attribute for the Clothing product variation type: <code>/admin/commerce/config/product-variation-types/clothing/edit</code>.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#make-a-product-attribute-optional","title":"Make a product attribute optional","text":"<p>By default, all product attributes are required. However, after adding a product attribute to a product variation type, you can change its field settings so that it is not required. For example, to make the Size attribute optional for the Clothing product type, navigate to its Manage fields configuration page at <code>/admin/commerce/config/product-variation-types/clothing/edit/fields</code>. Click the button for the Edit operation for the Size field.</p> <p></p> <p>On the Size settings for Clothing page, de-select the Required field checkbox and click the Save settings button to make the Size attribute optional for the Clothing product type.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#add-a-field-to-a-product-attribute","title":"Add a field to a product attribute","text":"<p>For the Color attribute, we want to present the options as color swatches instead of just the color names. Most of the documentation for this functionality will be covered in the Add to cart form page of the Displaying products section. Here we'll just set up the Color product attribute.</p> <p></p> <p>Note</p> <p>To set up the Color product attribute like this, you will need to install the Color module. See the documentation on Extending Drupal Commerce for an overview of installing contributed Drupal modules.</p> <p>The initial steps for creating the Color attribute are the same as the steps described above, for creating the Size attribute. Briefly, you need to:</p> <ol> <li>Navigate to the Product attributes page by using the menu item under the main Commerce menu or <code>/admin/commerce/product-attributes</code>.</li> <li>Enter \"Color\" for the Name.</li> <li>Select Rendered attribute for the Element type.</li> <li>Select the Clothing product variation type.</li> <li>Click the Save button to create the new product attribute.</li> <li>Enter \"Black\", \"Blue\", \"Green\", and \"Pink\" for the Color attribute values.</li> <li>Click the Save button.</li> </ol> <p>Now that we've created the Color attribute, we can add an additional field by navigating to the Manage fields configuration page for the Color attribute: <code>/admin/commerce/product-attributes/manage/color/fields</code>.</p> <ol> <li>Click the Add field button.</li> <li>Select Color from the list of field types.</li> <li>Enter \"Color\" for the Label.</li> <li>Click the Save and continue button.</li> </ol> <p></p> <p>On the Field settings configuration page, leave the default values are fine. On the Color settings for Color page, enable the Required field option and disable the Record opacity option. After saving the changes, you can return to Edit the page again, to set the default value for the color to \"#000000\".</p> <p></p> <p>After adding and configuring the Color field, return to the main configuration page for the Color attribute: <code>/admin/commerce/product-attributes/manage/color</code>. Enter the following values for the Color for each attribute value:</p> <ul> <li>Black: #000000</li> <li>Blue: #9CC8D5</li> <li>Green: #9ACA96</li> <li>Pink: #E1A7CE</li> </ul> <p>Click the Save button to complete the configuration for the Color product attribute.</p> <p></p> <p>In the next section, we'll look at creating product categories.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#product-categories","title":"Product categories","text":"<p>In the Simple product type documentation, we added a custom field to a product variation type, to allow product variations to have images. In the Product type with attributes documentation, we added a custom field to a product attribute, to allow a Color attribute to be displayed as a color swatch image instead of just the color name. In this section, we're going to look at how to add fields to product types so that we can organize products into categories that can be used for the product catalog.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#create-a-basic-product-category","title":"Create a basic product category","text":"<p>Let's start by creating a Brands taxonomy to organize products by brand.</p> <ol> <li>Navigate to the Taxonomy page at <code>/admin/structure/taxonomy</code>.</li> <li>Click the Add vocabulary button.</li> <li>Enter \"Brands\" for the Name.</li> <li>Click Save to create the new vocabulary.</li> </ol> <p></p> <p>Now you can add terms to the vocabulary or look into using the Feeds module or Migrate Tools module to import your pre-existing data.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#create-a-hierarchical-product-category","title":"Create a hierarchical product category","text":"<p>For our product catalog, we're also going to want to hierarchical categories so that customers can use faceted search to \"drill down\" to specific categories. For example, on the Commerce Demo site, we have an Urban Living product category with sub-categories of Food &amp; Beverage, Home, Outdoors, etc. And within the Home category, we further classify products as Accessories, Kitchen, Office, or Furnishings.</p> <p>To create a hierarchical taxonomy in Drupal, we can use the same steps we used to create a basic taxonomy. After creating a Product categories taxonomy and adding the terms, we have a listing that looks like this: </p> <p>Notice that the Accessories term appears to be duplicated, but that's fine, since one of those terms will be a sub-category of the Urban Living Home category, and the other will be a sub-category of the Urban Living Outdoors category. They have the same label but are actually two completely separate terms.</p> <p>To transform this simple listing into a hierarchical taxonomy, you just need to use the drag-and-drop icons in the leftmost column to rearrange the terms. You may also find it helpful to click the Show row weights link to set the order of terms within a particular category, especially if there are a great number of items. After moving items around, the Product categories taxonomy now looks like this and all we need to do is click the Save button to save the changes:</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#create-a-term-reference-field-for-your-product-category","title":"Create a term reference field for your product category","text":"<p>Let's add a field that references our Brands taxonomy to the Simple product type we previously created. (If you haven't created the Simple product type, you can use Default or any other product type.)</p> <ol> <li>Navigate to the Product types page at <code>/admin/commerce/config/product-types</code>.</li> <li>Select the Manage fields operation for the Simple product type.</li> <li>Click the Add field button.</li> </ol> <p></p> <ol> <li>Select Taxonomy term (in the Reference section) for the new field type.</li> <li>Enter Brand for the Label.</li> <li>Click the Save and continue button.</li> </ol> <p></p> <ol> <li>Click Save field settings on the next page to save the default configuration values.</li> <li>On the Brand settings for Simple page, select Required field and select Brands for the Vocabulary.</li> <li>Click the Save settings button.</li> </ol> <p></p> <p>The Brand field has now been added to the Simple product type. To add the Brand field to another product type, you can Re-use an existing field to select this Brand field on the Add field page for the product type.</p> <p>We can also create a new Taxonomy term reference field for our Product categories taxonomy and any other product taxonomies we want to create. Unlike the Brand field, which was limited to a single value, we'll specify Unlimited for the Allowed number of values for product categories:</p> <p></p> <p>To learn how to use the Brand and Taxonomy in a faceted product catalog, see the Product catalog with facets documentation.</p> <p>!!! info In the next section, we'll look at options for product architectures in Drupal Commerce.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#most-common-product-architectures","title":"Most common product architectures","text":"<p>This section provides a general overview of some of the most commonly used types of product architectures:</p> <ul> <li>Virtual products</li> <li>Physical products</li> <li>Configurable / customizable products</li> <li>Downloadable products / files</li> <li>Subscriptions</li> <li>Product bundles</li> <li>Unique / none-of-the-above architectures</li> </ul>"},{"location":"commerce2/developer-guide/products/product-architecture/#virtual-vs-physical-products","title":"Virtual vs physical products","text":"<p>In Drupal Commerce, products can be either virtual or physical. A physical product is any product that needs to be shipped or physically delivered to customers in some other way.</p> <p>If you have virtual products, no special configuration is necessary. Drupal Commerce will work for virtual products as is.</p> <p>If you have physical products, then you will need to extend Drupal Commerce with the Commerce Shipping module. (See the Extending Drupal Commerce documentation to add Commerce shipping to your project.)</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#physical-product-configuration","title":"Physical product configuration","text":"<p>After installing Commerce Shipping, navigate to the Product variation types page at <code>/admin/commerce/config/product-variation-types</code> and click the Edit button next to the name of your physical product variation type.</p> <p>You will see that two traits have been added to the configuration form for the product type:</p> <ul> <li>Has dimensions</li> <li>Shippable</li> </ul> <p></p> <ul> <li>If you specify that your product variation type has dimensions, then a Dimensions field will be added to your product variation type.</li> <li>If you specify that your product variation type is shippable, then a Weight field will be added to your product variation type.</li> </ul> <p></p> <p>Both these fields can be managed just like any other field in terms of displaying them on data entry forms and product displays. For more information on how these fields are used in the context of the Commerce Shipping module, see the Shipping documentation.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#stock-management-for-physical-products","title":"Stock management for physical products","text":"<p>An important aspect of product architecture with respect to stock management is the definition of your product attributes and variations. For each unique combination of attributes, i.e., for each product variation, you get a single SKU. If you need to keep track of the number of units for each color, for example, then Color should be a product attribute.</p> <p>In contrast, suppose you sell custom t-shirts that can be ordered in any customer-specified color and/or design, and you only track inventory based on Size (Small, Medium, Large, etc.) In this case, you would want Size as a product attribute, but Color would not be a product attribute. Instead, you would want to add a custom Color field that customers can use at the time they order an item to specify the t-shirt color.</p> <p>The Drupal 8 version for the Commerce Stock module is currently being ported to Drupal 8. It is not yet ready for use on a live site.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#configurable-customizable-products","title":"Configurable / customizable products","text":"<p>A configurable product is one for which a customer can specify unique information for a product. For example, a product that can be monogrammed with a name or initials is a configurable product. Product attributes, like color or size can only be used when the list of all possible values is known and set in advance. For example, the values for size for an item of clothing might be \"S\", \"M\", \"L\", and \"XL\".</p> <p>To implement a configurable product in the context of Drupal Commerce product architecture, the key is to add a custom field to the Add to cart form.</p> <ul> <li>Customers use the field to enter their unique product configuration.</li> <li>Merchants receive the information as part of the order's line item data.</li> </ul> <p>Both single-variation products and products with attributes / variations can be customized as a configurable product. Also, multiple custom fields could be added for a configurable product. For step-by-step instructions, see Add fields for customizable products in the Configuring the Add to cart form fields section of the documentation on the Add to cart form.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#downloadable-products-files","title":"Downloadable products / files","text":"<p>For downloadable products / files, we recommend the Commerce File module. The port to Drupal 8 is currently in progress. See the Port to Drupal 8 issue for the current status.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#subscriptions","title":"Subscriptions","text":"<p>For subscription products, we recommend the Commerce Recurring Framework module, which provides recurring billing for Drupal Commerce. See the Subscriptions documentation for additional information.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#product-bundles","title":"Product bundles","text":"<p>For product bundles, we recommend the Commerce Product Bundle module. The port to Drupal 8 is currently in progress. See the Drupal 8 (Commerce 2) Version issue for additional information:</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#purchasable-entities","title":"Purchasable entities","text":"<p>When it comes to product architectures, there is no one true answer. That is why Drupal Commerce needs to support any number of product architectures. Do you need a Commerce solution that uses a unique architecture? Perhaps there's just no way to make the \"products/variations/attributes\" structure provided by the Product module fits your needs. If so, you can develop a completely custom product architecture but still benefit from the rest of the Drupal Commerce ecosystem of modules (cart, checkout, order, payment, etc.).</p> <p>The key to Drupal's product architecture flexibility is the concept of a purchasable entity. Product variations are one example of purchasable entities. Every product variation (and every purchasable entity) in Drupal Commerce has 4 key properties:</p> Property What does it mean? Stores The stores through which the item can be purchased. Title The name or label of the item being purchased. Price The base price of the item being purchased. Order item type The type of order item (line item) to use when a product is purchased (added to order/cart). <p>Order line items can be configured to reference any purchasable entity. On the Order item type configuration page, you can specify the Purchasable entity type for your line items. Product variation is just the default option.</p> <p></p> <p>If you're interested in writing custom code to define your own purchasable entities, you can start by looking at the <code>PurchasableEntityInterface</code>, which is included in the Code recipes page of this documentation section.</p> <p>!!! info In the next section, we'll describe the setup for multilingual products.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#multilingual-products","title":"Multilingual products","text":"<p>If you want to display the products on your site in multiple languages, you'll need to build a Multilingual Drupal site. Multilingual functionality in Drupal is a larger topic, beyond the scope of this Drupal Commerce documentation guide. For an overview, please see the Drupal 8 User Guide section on Making Your Site Multilingual. This page describes basic multilingual setup for products, product variations, and product attribute values.</p>"},{"location":"commerce2/developer-guide/products/product-architecture/#prerequisites","title":"Prerequisites","text":"<ul> <li>The Drupal core Content Translation module is required for multilingual products.</li> <li>If you have product attributes, you'll also need to install the Drupal core Configuration Translation module.</li> <li>Before you can translate content, there must be at least two languages. You can add languages at <code>/admin/config/regional/language/add</code>.</li> </ul>"},{"location":"commerce2/developer-guide/products/product-architecture/#enable-translations-for-products-and-variations","title":"Enable translations for Products and variations","text":"<p>Once the Content Translation module has been installed, you will see a new Language settings section on the configuration forms for all Product types and Product variation types. Click the triangle to the left of the Language settings label to expand the form options.</p> <p>Alternatively, you can also use the main Content language configuration page to set the language settings for all types of Products and Product variations in the same place. Navigate to <code>/admin/config/regional/content-language</code> to make your selections. When you select the checkboxes next to any content type, a corresponding set of configuration options will appear on the form.</p> <p>Enable translation for product and product variation types that should be translated.</p> <p></p> <p>Once translation has been enabled for a product type, you will see a Translate tab for products of that type.</p> <p></p> <p>On the Translations page for each product, you will see options for adding a translation in each of your installed languages. Your content editors can click the Add or Edit button to update the product text for each language.</p> <p></p> <p>If you would like to translate the names of your product and product variation types, you can use the Translate tabs on the configuration forms for each type.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#enable-translations-for-product-attribute-values","title":"Enable translations for product attribute values","text":"<p>For multilingual product attribute values, you need to enable attribute value translation for each product attribute that requires translation.</p> <ol> <li>Go to the Product attributes page by selecting the menu item from the main Commerce menu or navigating to <code>/admin/commerce/product-attributes</code></li> <li>Click the Edit button for each product attribute.</li> <li>Click the checkbox for Enable attribute value translation.</li> <li>Click the Save button (below the list of attribute values).</li> </ol> <p></p> <p>After enabling translation for an attribute, navigate to its Translations page. For the Color attribute, this page is located at <code>/admin/commerce/product-attributes/manage/color/translate</code>. You can also use the Translate product attribute tab link. Click the Add or Edit button next to each language to enter translations.</p> <p></p> <p>You can add translations for the product attribute label and the names for each of its values. If you added extra fields to a product attribute that also need to be translated, you can enable those fields for translation using the main Content language configuration page, located at <code>/admin/config/regional/content-language</code>. For our Color product attribute, adding a translation for the hex value of its Color field doesn't make sense, but for other added product attribute fields, translations might be necessary.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-architecture/#code-recipes","title":"Code recipes","text":"<p>If you want to write custom code to programatically create or manage your product architecture, you can use these code recipes as a starting point.</p> <p>Create:</p> <ul> <li>Product type</li> <li>Product variation type</li> <li>Product attributes</li> </ul> <p>Load:</p> <ul> <li>Product type</li> <li>Product variation type</li> <li>Product attribute</li> </ul> <p>Implement:</p> <ul> <li>PurchasableEntityInterface</li> </ul> <p> Creating a product type</p> <p>In the Simple product type documentation, we looked at creating a product type through the administration UI. A Simple product variation type was created automatically for us. If you are creating a product type programatically, you will need to create its product variation type before you create the product type.</p> <pre><code>    /**\n     * id [String]\n     *   Primary key for this product type.\n     *\n     * label [String]\n     *   Label for this product type\n     *\n     * description [String]\n     *   Description for this product.\n     *\n     * variationType [String] - [DEFAULT = default]\n     *   Foreign key for the variation type used.\n     *\n     * multipleVariations [Bool] - [OPTIONAL, DEFAULTS TO TRUE]\n     *   Whether products of this type can have multiple variations.\n     *\n     * injectVariationFields [Bool] - [OPTIONAL, DEFAULTS TO TRUE]\n     *   Whether or not to inject the variation fields.\n     */\n\n    // Create the product type.\n    $product_type = \\Drupal\\commerce_product\\Entity\\ProductType::create([\n    'id' =&gt; 'my_custom_product_type',\n    'label' =&gt; \"My custom product type\",\n    'description' =&gt; '',\n    'variationType' =&gt; 'my_custom_variation_type',\n    'multipleVariations' =&gt; TRUE,\n    'injectVariationFields' =&gt; TRUE,\n    ]);\n    $product_type-&gt;save();\n\n    // These three functions must be called to add the appropriate fields to the type\n    commerce_product_add_variations_field($product_type);\n    commerce_product_add_stores_field($product_type);\n    commerce_product_add_body_field($product_type);\n</code></pre> <p>Creating a variation type</p> <pre><code>    /**\n     * id [String]\n     *   The primary key for this variation type.\n     *\n     * label [String]\n     *   The label for this variation type.\n     *\n     * status [Bool] - [OPTIONAL, DEFAULTS TO TRUE]\n     *   [AVAILABLE = FALSE, TRUE]\n     *   Whether or not it's enabled or disabled. 1 for enabled.\n     *\n     * orderItemType [String] - [DEFAULT = default]\n     *   Foreign key for the order item type to use.\n     *\n     * generateTitle [Bool] - [DEFAULT = TRUE]\n     *   Whether or not it should generate the title based off of product label and attributes.\n     */\n    $variation_type = \\Drupal\\commerce_product\\Entity\\ProductVariationType::create([\n    'id' =&gt; 'my_custom_variation_type',\n    'label' =&gt; 'Variation Type With Color',\n    'status' =&gt; TRUE,\n    'orderItemType' =&gt; 'default',\n    'generateTitle' =&gt; TRUE,\n    ]);\n    $variation_type-&gt;save();\n</code></pre> <p>Creating product attributes</p> <pre><code>    /**\n     * id [String]\n     *   The primary key for this attribute.\n     *\n     * label [String]\n     *   The label for this attribute.\n     */\n    $color_attribute = \\Drupal\\commerce_product\\Entity\\ProductAttribute::create([\n    'id' =&gt; 'color',\n    'label' =&gt; 'Color',\n    ]);\n    $color_attribute-&gt;save();\n\n    $size_attribute = \\Drupal\\commerce_product\\Entity\\ProductAttribute::create([\n    'id' =&gt; 'size',\n    'label' =&gt; 'Size',\n    ]);\n    $size_attribute-&gt;save();\n\n    // We load a service that adds the attributes to the variation type we made previously.\n    $attribute_field_manager = \\Drupal::service('commerce_product.attribute_field_manager');\n\n    $attribute_field_manager-&gt;createField($color_attribute, 'my_custom_variation_type');\n    $attribute_field_manager-&gt;createField($size_attribute, 'my_custom_variation_type');\n</code></pre> <p>Loading a product type</p> <pre><code>    // Loading is based off of the primary key [String] that was defined when creating it.\n    $product_type = \\Drupal\\commerce_product\\Entity\\ProductType::load('my_custom_product_type');\n</code></pre> <p>Loading a variation type</p> <pre><code>    // Loading is based off of the primary key [String] that was defined when creating it.\n    $variation_type = \\Drupal\\commerce_product\\Entity\\ProductVariationType::load('my_custom_variation_type');\n</code></pre> <p>Loading a product attribute <pre><code>    // Loading is based off of the primary key [String] that was defined when creating it.\n    $size_attribute = \\Drupal\\commerce_product\\Entity\\ProductAttribute::load('size');\n</code></pre> <p>PurchasableEntityInterface</p> <p>The ProductVariation entity class implements the PurchasableEntityInterface. Any content entity type that implements this interface can be purchased. Line items (order items) have a purchased_entity reference field. If you develop a content entity type that implements this PurchasableEntityInterface, you can set up an order item type to allow customers to purchase your custom entity type instead of standard product variations.</p> <pre><code>    &lt;?php\n\n    namespace Drupal\\commerce;\n\n    use Drupal\\Core\\Entity\\ContentEntityInterface;\n\n    /**\n     * Defines the interface for purchasable entities.\n     *\n     * Lives in Drupal\\commerce instead of Drupal\\commerce_order so that entity\n     * type providing modules such as commerce_product don't need to depend\n     * on commerce_order.\n     */\n    interface PurchasableEntityInterface extends ContentEntityInterface {\n\n        /**\n         * Gets the stores through which the purchasable entity is sold.\n         *\n         * @return \\Drupal\\commerce_store\\Entity\\StoreInterface[]\n         *   The stores.\n         */\n        public function getStores();\n\n        /**\n         * Gets the purchasable entity's order item type ID.\n         *\n         * Used for finding/creating the appropriate order item when purchasing a\n         * product (adding it to an order).\n         *\n         * @return string\n         *   The order item type ID.\n         */\n        public function getOrderItemTypeId();\n\n        /**\n         * Gets the purchasable entity's order item title.\n         *\n         * Saved in the $order_item-&gt;title field to protect the order items of\n         * completed orders against changes in the referenced purchased entity.\n         *\n         * @return string\n         *   The order item title.\n         */\n        public function getOrderItemTitle();\n\n        /**\n         * Gets the purchasable entity's price.\n         *\n         * @return \\Drupal\\commerce_price\\Price|null\n         *   The price, or NULL.\n         */\n        public function getPrice();\n\n    }\n</code></pre>"},{"location":"commerce2/developer-guide/products/product-architecture/#links-and-resources","title":"Links and resources","text":"<ul> <li>Making Your Site Multilingual</li> <li>Drupal 8 User Guide documentation on Concept: Taxonomy</li> </ul>"},{"location":"commerce2/developer-guide/products/product-information-structure/","title":"Product Information Structure","text":""},{"location":"commerce2/developer-guide/products/product-information-structure/#product-information-structure","title":"Product Information Structure","text":"<p>This section provides specific, technical explanations of the product-related data structures and relationships in Drupal Commerce. Familiarity with Drupal concepts including configuration entities, content entities, bundles, base fields, and plugins is assumed. For a more general introduction to Drupal Commerce products,  see the Concepts documentation page. For step-by-step instructions for setting up products for your site, see the Product Architecture documentation.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#products","title":"Products","text":"<p>A product is a content entity that has a product type as its bundle entity type. Products are translatable. Like standard Drupal nodes, products are designed to be displayed as standalone pages on your site. In fact, most of a product's base fields are very similar to those of node entities:</p> Base field Description product_id Unique numeric id for the product title The product title, or name; required body A text with summary field, displayed on the product page status Published status; boolean type Id of the product type bundle path Optional URL alias for the product display page uid The product author created Time when the product was created changed Time when the product was last edited <p>Additionally, product entities have two required, unlimited cardinality entity reference fields: stores and variations. - Each product can belong to multiple stores, but each individual order belongs to a single store. Thus, customers will be unable to purchase products from multiple stores in a single order. - Every product has one or more variations, which are the items that are actually purchased by customers. The <code>Product</code> class has a <code>getDefaultVariation()</code> method which returns the first active variation. This method is used when products are displayed, whenever a specific variation has not been selected by the customer.</p> <p>Deleting products - Deleting a product deletes its variations.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#product-variations","title":"Product variations","text":"<p>A product variation is a content entity that has a product variation type as its bundle entity type. Product variations are translatable. Each product variation has a parent product entity, sku, title, price, and status (active/inactive). The sku must be unique across all product variation types. See the Product Concepts documentation for more information on product skus. The author of the variation as well as its created and changed timestamps are also stored.</p> Base field Description variation_id Unique numeric id for the product variation product_id Id of the parent product entity sku Unique product variation sku, required title The product variation title, required price The variation price, required list_price The variation list price status Whether the variation is active, boolean type Id of the product variation type bundle path Optional URL alias for the product display page uid The product variation author created Time when the product was created changed Time when the product was last edited <p>Since product variations belong to specific products and since products are specifically assigned to one or more stores, product variations are also assigned to stores. The <code>ProductVariation</code> class provides a <code>getStores()</code> method that returns an array of stores in which the product variation is available.</p> <p>The <code>ProductVariation</code> class also provides these methods that are used when a product variation is purchased (added to a cart): - The <code>getOrderItemTypeId()</code> method loads the variation's product variation type and returns the ID of the order item type set for that product variation type. - The <code>getOrderItemTitle()</code> method will return the product variation's title, if set. If the variation's title has not been set, then a title will be generated as described below, in the product variation types documentation.</p> <p>Since product variations aren't designed to be displayed as standalone pages, the <code>Drupal\\Core\\Entity\\Entity:toUrl()</code> method has been overridden by the <code>ProductVariation</code> class for the product variation canonical and revision link templates. In place of a product-variation-specific page, the canonical view page for the product variation's parent product is displayed, with <code>v=VARIATION_ID</code> appended as the URL's query.</p> <p>In the <code>ProductVariationStorage</code> class, the <code>loadFromContext()</code> method will use the variation specified in the URL: <code>?v=1</code>, for example. It loads the identified variation, provided it is currently active and belongs to the current product. It also ensures that the current user has the necessary access permissions. If no variation is specified (or the specified variation cannot be loaded), then the product's default variation is instead loaded. Note that the returned variation may not be enabled; the caller needs to check it against the list from <code>loadEnabled()</code>. (See below.)</p> <p>This <code>loadFromContext()</code> method is used by the <code>ProductViewBuilder</code> class and product variation widgets (which are used by the add-to-cart form) to properly display the selected product variation. (See <code>Drupal\\commerce_product\\Plugin\\Field\\FieldWidget\\ProductVariationWidgetBase</code>.)</p> <p>In addition to the <code>loadFromContext()</code> method, the <code>ProductVariationStorage</code> class also provides these methods for loading product variations: - The <code>loadBySku($sku)</code> method loads the variation corresponding to the given sku string. - The <code>loadEnabled(ProductInterface $product)</code> returns an array of enabled product variations for the given product, in the original sort order. Custom modules can apply their own filtering (based on date, stock, etc.) using the <code>FILTER_VARIATIONS</code> event. This method also ensures that the current user has the necessary access permissions.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#product-types-and-product-variation-types","title":"Product types and product variation types","text":"<p>Product types and product variation types are configuration bundle entities for products and product variations, respectively. Both extend the <code>CommerceBundleEntityBase</code> base class.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#commercebundleentitybase","title":"CommerceBundleEntityBase","text":"<p>The CommerceBundleEntityBase base class provides unique id and label fields, an array of entity traits, and a locked boolean field.</p> <p>An entity trait represents a behavior that can be attached to a specific entity bundle, by acting as a marker, or flag, and/or providing a set of fields. For example, the Commerce Shipping module adds a Shippable trait to product variation types. If a product variation type is flagged as shippable, then a weight field is added to product variations of that type.</p> <p>Entity traits are implemented as plugins. If you are interested in creating your own product or product variation type entity traits, you can get started by looking at the EntityTraitBase class, located in <code>Drupal\\commerce\\Plugin\\Commerce\\EntityTrait</code>.</p> <p>The locked property of a commerce entity bundle controls whether a bundle can be deleted. CommerceBundleEntityBase provides <code>lock()</code> and <code>unlock()</code> methods that can be used to set the locked status for a commerce entity bundle.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#product-types","title":"Product types","text":"<p>A product type is a configuration bundle entity that extends <code>CommerceBundleEntityBase</code>. It has a description, variation type ID field, and booleans fields for allow multiple variations and inject variation fields options.</p> <p>Why does a product type need a set variation type? The variation type ID field value is set when a new product type is created. It is used to set the target bundle for the product variations field so that whenever a variation is added to a product, the correct type of variation is added. The variation type ID field is also used for the Product attributes overview formatter, a formatter that displays a product's variations as rendered attribute entities.</p> <p>The inject variation fields setting affects how products are displayed. You can learn more about product variation field injection in the Displaying products documentation.</p> <p>The allow multiple variations affects how products are edited. You can learn more about this setting in the Editing products documentation</p> <p>The product type administrative page also includes an option to Publish new products of this type by default. This option value is not stored with the product type configuration data; instead, it is used to set the default value for the product entity's status base field, for the product type.</p> <p>A standard Drupal Commerce installation includes a product type named Default. Its product variation type is the Default product variation type, and it allows multiple variations per product. Its inject variations fields and publish new products of the type by default settings are both enabled. You can change these default values or customize the Default product variation type with additional fields.</p> <p></p> <p>Alternatively, if you do not want to use the Default product type, you can also delete it completely from your site.</p> <p>Deleting product types - Product types cannot be deleted if products of those types exist. - Locked product types cannot be deleted. - Deleting a product type does not delete its variation type, even if the variation type is not being used by any other product type.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#product-variation-types","title":"Product variation types","text":"<p>A product variation type is a configuration bundle entity that extends <code>CommerceBundleEntityBase</code>. It has an order item type ID field and a boolean generate title field. You can also customize a product variation type by adding custom fields and/or product attributes. - The order item type ID field is used to determine what type of order item should be added to a customer's cart at the time a product variation is selected for purchase. - The generate title field corresponds to the Generate variation titles based on attribute values option on the product variation type administration form. If selected for a product variation type, titles for its product variations will be automatically generated whenever the variations are saved. The pattern for the generated title is the product title followed by a dash ('-') character and a comma-separated list of attribute value labels. For a product variation type with color and size attributes, one product variation title might be, \"Drupal Commerce Hoodie - Green, Medium\". (If the product variation type does not have any product attributes, the product title is used for the variation title.)</p> <p>A standard Drupal Commerce installation includes a product variation type named Default. Its order item type is the Default order item type, and its generate title setting is enabled. You can change these default values or customize the Default product variation type with additional fields and product attributes. In this screenshot, Color and Size product attributes have been added to the site, so they can be added to the Default product variation type.</p> <p></p> <p>Alternatively, if you do not want to use the Default product variation type, you can also delete it completely from your site.</p> <p>Deleting product variation types - Product variation types cannot be deleted if product variation entities of those types exist. - Locked product variation types cannot be deleted.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#product-type-and-product-variation-type-relationships","title":"Product type and product variation type relationships","text":"<p>A product type has a single product variation type, but a single product variation type could be used for multiple product types. In most cases, though, you will have paired product types and product variation types. For example, the Default product type with the Default product variation type, the Clothing product type with the Clothing product variation type, and the Book product type with the Book product variation type.</p> <p>In the following diagram, you can see that a Product entity can optionally have Custom Fields, and a Product variation entity can optionally have both Custom Fields and Attribute(s). These additional fields are all specific to bundle types. You use the product type and product variation type administrative pages to specify custom fields and product attributes for product and product variation entities.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#attributes-and-attribute-values","title":"Attributes and attribute values","text":"<p>Structurally, product attributes and product attribute values are similar to taxonomy vocabularies and terms, respectively. Each product variation has a product attribute value for each product attribute selected for its product variation type. When thinking about whether to create a product attribute or, alternatively, to create a taxonomy for categorizing/distinguishing variations of a product, the key is to consider product variation SKUs and prices. If a particular characteristic of a product variation, such as storage conditions, for example, does not correspond to a specific SKU/price combination, then you will probably want to use a taxonomy term reference custom field instead of a product attribute. It can also be helpful to think of product attributes as things selected by the customer. If the product display page should present a set of options to the customer for the product, these options are generally going to be the product attribute values.</p> <p>A product attribute is a configuration entity that has the following properties:</p> Property Description id Unique string id. label Label to be used for the attribute and typically displayed to customer. For example: Color or Size. elementType Element to be used for displaying the attribute value options to the customer. One of: <ul><li>radios: radio buttons</li><li>select: select list</li><li>commerce_product_rendered_attribute: Rendered attribute.See Product attributes in the Displaying products documentation for more information.</li></ul> <p>The product attribute entity also has two useful getter methods:</p> <ul> <li>The <code>getElementType()</code> method returns the attribute's entityType value.</li> <li>The <code>getValues()</code> method returns an array of <code>ProductAttributeValueInterface</code> objects, sorted by weight and name.</li> </ul> <p>Deleting product attributes</p> <ul> <li>If a product attribute is deleted, then all of its product attribute values will also be deleted.</li> </ul> <p>A product attribute value is a content entity that has a product attribute as its bundle entity type. Its base fields are:</p> Base field Description attribute The ID of the product attribute value's product attribute bundle. name Typically displayed to customers as a selectable product option, like Blue, Green, or Red. weight Used for ordering attribute values in relation to other attribute values. The default ordering is alphabetical. created Time when the attribute value was created. changed Time when the attribute value was last edited. <p>Custom fields can be added to product attribute value entities through the administrative UI.</p> <p>The following diagram illustrates the relationships amoung product attributes, product attribute values, product variations, and products.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#product-attribute-field-manager-service","title":"Product attribute field manager service","text":"<p>ProductAttributeFieldManager is a service that manages attribute fields. Attribute fields are the entity reference fields that store values of a specific attribute on the product variation. See <code>Drupal\\commerce_product\\ProductAttributeFieldManagerInterface</code> for information on the methods provided by this service. For product variation entities, it is used by several getter method related to product attributes: - <code>getAttributeFieldNames()</code> gets the names of the variation's attribute fields. - <code>getAttributeValueIds()</code> gets the variation's attribute value IDs, keyed by field name. - <code>getAttributeValueId($field_name)</code> gets the variation's attribute value ID for the given field name. - <code>getAttributeValues()</code> gets the variation's attribute values, keyed by field name.</p> <p>This service is also used to provide the list of available attributes on the product variation type administrative form.</p>"},{"location":"commerce2/developer-guide/products/product-information-structure/#links-and-resources","title":"Links and Resources","text":"<ul> <li>SKU Best Practices for Online Shopping Sites, by Andrew Brett Watson</li> </ul>"},{"location":"commerce2/developer-guide/products/product-management/","title":"Product Management","text":"<p>Learn techniques for designing and customizing the product management experience for your administrative users.</p>"},{"location":"commerce2/developer-guide/products/product-management/#access-control","title":"Access control","text":"<p>In Drupal Commerce, access control for product management is based on Drupal's permissions system. If you are unfamiliar with the concept of <code>Permissions</code> in Drupal, you can read about Users, Roles, and Permissions in the Drupal 8 User Guide. Managing user roles &amp; permission in Drupal 8 is also a good introductory article on the topic.</p> <p>Administrative users with product management responsibilities will need the <code>Use the commerce administration pages</code> permission as well as any relevant <code>Commerce Product</code> permissions. Here is a list of Commerce Product permissions, as displayed on the User Permissions page (<code>/admin/people/permissions</code>).</p> <p></p> <p>In the above image, six permissions prefixed with Default: have been highlighted. Drupal Commerce provides bundle-level granularity for its Product permissions. In other words, each product type has its own set of create / delete / update / view permissions. So it's possible to have different product managers for different product types.</p> <p>All users with product management responsibilties will also need the <code>Access the product overview page</code> permission so that they can access the Products page at <code>/admin/commerce/products</code>.</p> <p>Additionally, since every product must be assigned to one or more stores, users will not be able to create products unless they have the <code>View stores</code> permission. Granting this permission will not give users access to the store admin pages.</p> <p>In the next section, we'll look at how you can customize the forms used for creating and editing product-related data.</p>"},{"location":"commerce2/developer-guide/products/product-management/#editing-products","title":"Editing products","text":"<p>This section describes how you can customize the forms used to enter product data in Drupal Commerce. The forms that are used to edit product and product variation types can be configured uniquely for each of your product and variation types.</p>"},{"location":"commerce2/developer-guide/products/product-management/#single-vs-multi-variation-product-types","title":"Single vs. multi-variation product types","text":"<p>In the Product architecture documentation, we created a Simple product type that had only a single variation per product and a Clothing product type with multiple variations per product. Let's start by comparing the forms for these two product types. On the left, we have the form for the Simple product type, with a Product Information section that includes data entry fields for the single product variation. On the right, we have the form for the Clothing product type, with a Variations tab that links to a separate page for managing the product's variations. The rest of the forms is identical.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-management/#manage-the-product-form-display","title":"Manage the product form display","text":"<p>To customize the product data entry form, start by navigating to the Manage form display configuration page for your product type. For the Simple product type, that page is located at <code>/admin/commerce/config/product-types/simple/edit/form-display</code>. Let's look at the configuration form (on the left) alongside the product form (on the right) to better understand how they're related.</p> <p></p> <p>The first thing to notice is that there are four fields that do not appear in the main section of the form; the Stores, URL alias, Author, and Created fields are separated into a Sidebar section of the product field. We will look at the Sidebar section next, but for now, let's focus on the main section of the product form.</p> <p>For the non-sidebar product fields, you can use a product type's Manage form display configuration page to control: - The ordering of the fields, by using the drag icon in the leftmost column or clicking the Show row weights link to manually set the order. - Whether fields are enabled (included on the form) or disabled, by dragging disabled fields to the Disabled section at the bottom of the form. - The selected widget for each field, from a list of available widgets for the field type. (For some field types, only a single widget type will be available.) - The configuration options for each widget, using the gear icon link that appears in the rightmost column.</p>"},{"location":"commerce2/developer-guide/products/product-management/#customizing-the-sidebar-section-of-the-product-form","title":"Customizing the sidebar section of the product form","text":"<p>The Sidebar section of the product form, highlighted in green in the image above, is a custom administrative section that separates a set of specific product fields from the rest of the form.</p>"},{"location":"commerce2/developer-guide/products/product-management/#structure-of-the-sidebar-section","title":"Structure of the sidebar section","text":"<ul> <li>Meta information (read-only)</li> <li>If the product already exists, its Published status is displayed as either Published or Not published.</li> <li>Last saved date or Not saved yet, if the product is new.</li> <li>Author (the product author)</li> <li>Visibility settings</li> <li>If you have more than one store, you can select the stores through which the product can be sold.</li> <li>URL path settings</li> <li>URL alias (link to doc page on SEO, in marketing section)</li> <li>Authoring information</li> <li>Author</li> <li>Created date and time</li> </ul>"},{"location":"commerce2/developer-guide/products/product-management/#stores-field-and-the-entity-select-widget","title":"Stores field and the Entity select widget","text":"<p>The Stores field appears in the Visibility settings of the Sidebar section of the product data entry form. If you  have only a single store for your site and want to hide the Visibility settings from users, use the Entity select field widget with its Hide if there's only one available entity setting enabled. Make sure you do not Disable the Stores field; it is required, and if a product isn't assigned to any store, your customers will get ugly error messages when they attempt to add the product to their cart.</p> <p></p> <p>By default, Entity select is set as the widget for the Stores field. This is a custom Drupal Commerce widget that can be used by entity reference fields, like Stores. The entity select widget is an adaptive field widget that changes its form element based on the number of available options for the field. If there is only one available entity (i.e., only one available store in this case), you can enable a setting to hide the field completely. If shown, the single option will be displayed with either a checkbox or radio button. Checkboxes are used whenever multiple items can be selected; radio buttons are used when only a single item can be selected. Since products can belong to multiple stores, checkboxes will be used for the Stores field. You can also set an autocomplete threshold for the Entity select widget. If the number of option values exceeds the autocomplete threshold, then an autocomplete field will be presented to the user instead of checkboxes/radio buttons. Users can use the autocomplete field to enter text to search for the Store by name.</p> <p>If you do not want to use the Entity select widget, you can select one of the other available options. However, you should avoid using the Inline entity form - Complex widget, since you will generally not want users to edit Store data when they're editing products.</p> <p>To set the configuration options for your selected widget, use the gear icon link that appears in the rightmost column of the Manage form display fields table.</p>"},{"location":"commerce2/developer-guide/products/product-management/#url-alias-field","title":"URL alias field","text":"<p>The URL alias field appears in the URL path settings of the Sidebar section of the product data entry form. If you move the URL alias to the Disabled section of the Manage form display configuration form, URL path settings will not appear on your product data entry forms. In a standard Drupal Commerce installation, there are no alternative widgets or configuration options available for this field.</p>"},{"location":"commerce2/developer-guide/products/product-management/#author-and-created-fields","title":"Author and Created fields","text":"<p>The Author and Created fields appear in the Authoring information of the Sidebar section of the product data entry form. If both fields are Disabled, Authoring information will not appear on your product data entry forms.</p> <p>The Author field can reference any User, including any that are customers rather than administrative users, so the list of options for Author may be quite long. As a result, you will probably want to use the Autocomplete field widget for the Author field.</p> <p>In a standard Drupal Commerce installation, there are no alternative widgets or configuration options available for the Created field.</p>"},{"location":"commerce2/developer-guide/products/product-management/#editing-the-variation-for-single-variation-product-types","title":"Editing the variation for single-variation product types","text":"<p>The Single variation (Product information) widget is used for the Variations field. Unless you've developed a custom field widget for your product variations field, you should not change the widget type for the Variations field. This widget embeds a data entry form for a product variation, as configured for the specific product variation type. In this case, we are looking at a Simple product with a Simple product variation type. To customize the data entry form for the Simple product variation, navigate to its Manage form display configuration form at <code>/admin/commerce/config/product-variation-types/simple/edit/form-display</code>.</p> <p></p> <p>In the above image, you can see how the settings for the form display of the Simple product variation type (on the left) correspond to the Variations form that's embedded into the data entry form for the Simple product (on the right).</p> <p>You can use a product variation type's Manage form display configuration form to control:</p> <ul> <li>The ordering of the product variation fields</li> <li>Whether fields are enabled (included on the form) or disabled</li> <li>The selected widget for each field</li> <li>The configuration options for each widget</li> </ul>"},{"location":"commerce2/developer-guide/products/product-management/#editing-variations-for-multi-variation-product-types","title":"Editing variations for multi-variation product types","text":"<p>For product types that allow multiple variations per product, administrative users will see a Variations tab when editing or viewing products. Clicking on the Variations tab link takes you to another page, separate from the main product form. So you'll want to make sure administrative users understand that they need to click the Save button on a product's Edit page before navigating to its Variations page.</p> <p>A product's Variations page is a draggable list of variations with operations links in the rightmost column. To customize the edit form for product variations, use the product variation type's Manage form display configuration form as described above.</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-management/#theming-the-product-form","title":"Theming the product form","text":"<p>If you need to customize the layout for your product form beyond what is possible using the administration UI, you can use the product form Twig template as part of a custom theme. Theming is an advanced topic beyond the scope of this Drupal Commerce documentation guide. For an overview, please see the Theming Drupal Guide on Drupal.org.</p> <p>The default product form template is commerce-product-form.html.twig</p> <p>Also, you may want to look at the custom css library that's used for the default product form, located within the Drupal Commerce Product module: <code>css/product.form.css</code>.</p> <p>In the next section, we'll look at customization options for the Product overview page.</p>"},{"location":"commerce2/developer-guide/products/product-management/#product-overview-page","title":"Product overview page","text":"<p>This section describes how you can use Drupal Views to customize the Product overview page, located at <code>/admin/commerce/products</code>.  If you are unfamiliar with using <code>Views</code> in Drupal, you can read about Creating Listings with Views, in the Drupal 8 User Guide.</p> <p>Without any customizations, administrative users can use the Product overview page to:</p> <ul> <li>Search for products by title (product name) or type (if multiple product types exist).</li> <li>Sort the listing by title, product type, published status, or last update.</li> <li>Perform delete, publish, and unpublish operations in bulk on selected products.</li> </ul> <p></p> <p>The functionality of this page is powered by Views. Navigate to <code>/admin/structure/views/view/commerce_products</code> to begin customizing the Products View using the administrative interface:</p> <p></p>"},{"location":"commerce2/developer-guide/products/product-management/#modify-displayed-columns","title":"Modify displayed columns","text":"<p>Use the FIELDS section to add, remove, or reorder the columns displayed on the Products overview page. If you look at the list of Fields, you'll see two special items in addition to Title, Type (hidden if there's only one bundle), Status, and Updated. Bulk update and Operations links are two special Fields that will be described below. To control sorting options for the displayed fields, use the <code>Settings</code> link in the FORMAT section.</p>"},{"location":"commerce2/developer-guide/products/product-management/#modify-filter-options","title":"Modify filter options","text":"<p>You can create additional criteria for filtering products by setting options in the FILTER CRITERIA section. For example, if you want to provide an option for displaying only Published or Unpublished products, add Published as a filter criterion and select the expose this filter to visitors option. In the EXPOSED FORM section of the ADVANCED settings, you can further customize the appearance of the filter form on the products page.</p>"},{"location":"commerce2/developer-guide/products/product-management/#bulk-update-options","title":"Bulk update options","text":"<p>The Bulk update field provides the checkbox in the first column of the listing as well as the With selection menu. Drupal Commerce provides three options by default:</p> <ul> <li>Delete product</li> <li>Publish product</li> <li>Unpublish product</li> </ul> <p>Administrative users with the necessary permissions can execute these operations on selected products. You can remove any of these options by clicking on the Product: Bulk update item in the FIELDS section. You can also add options by creating Action plugins with custom code. Looking at the code for the Publish and Unpublish product Action plugins is a good place to start: <code>Drupal\\commerce_product\\Plugin\\Action\\PublishProduct</code>. The, Create an action for custom mass updates with Drupal 8, article is a good introduction to the topic.</p>"},{"location":"commerce2/developer-guide/products/product-management/#operations-links","title":"Operations links","text":"<p>The Operations menu that appears in the rightmost column of the Products overview page can be modified with custom code, using hook_entity_operation_alter. If you are unfamiliar with hooks, see Understanding Hooks in the documentation provided by drupal.org.</p> <p>In the next section, we'll look at how you can futher customize the Products View to provide Product Export options.</p>"},{"location":"commerce2/developer-guide/products/product-management/#importing-and-exporting","title":"Importing and exporting","text":"<p>taxonomy:     category: docs</p> <p>Functionality for importing and exporting products is not built into Drupal Commerce core. This section describes how various Drupal contrib modules can be used to extend Drupal Commerce for importing and / or exporting products. See Extending Drupal Commerce documentation for information on how Drupal Commerce can be extended with additional modules.</p>"},{"location":"commerce2/developer-guide/products/product-management/#importing-products","title":"Importing products","text":"<p>The Commerce Feeds module can be used to import data in a variety of formats into Products, using the administrative interface. Unfortunately, it is not yet fully ported into Drupal 8. It is built on top of the Feeds module, which does have a pre-release version for Drupal 8 as well as documentation pages. If you are interested on working to develop the Drupal 8 version of Commerce Feeds, this issue has been opened, with a link to the work that has been done so far.</p> <p>If you are comfortable writing custom code for importing products, then the Commerce Migrate module is a good place to start. There is a version for Drupal 8, documentation, and an explanation of the differences between using Feeds vs. using Migrate for importing products.</p>"},{"location":"commerce2/developer-guide/products/product-management/#exporting-products","title":"Exporting products","text":"<p>You can use the Views data export module to provide product export functionality. If you are unfamiliar with using <code>Views</code> in Drupal, start by reading about Creating Listings with Views, in the Drupal 8 User Guide.</p> <p>Here is an example of using Views data export for exporting products:</p> <p>1. Install and enable the Views data export module using composer.</p> <p><code>$composer require drupal/views_data_export --prefer-dist</code></p> <p>2. Set up a new View page for Product data  *  Create a new View for Product data, displayed as a table. Create a page and an Administration menu link.</p> <p></p> <ul> <li>Under the ADVANCED view options, add a relationship to product variations and set it as required.</li> </ul> <p></p> <ul> <li> <p>Add all the product and variation fields you want to export.</p> </li> <li> <p>If you want to add any Exposed filter criteria (so that users can specify subsets of products to be exported), make sure you check the Remember Last Selection option for those exposed filters.</p> </li> <li> <p>If you want to add Product export as an option under the Commerce administrative menu, click on the Menu link under PAGE SETTINGS, select Normal menu entry as the Type, enter a Menu link title, and specify Commerce (under the  menu) as the Parent. <p></p> <ul> <li>Under the PAGE SETTINGS section, you can also set the Path to something like <code>/admin/commerce/product-export</code> so that Breadcrumbs will work correctly and set Access to a permission like Access the products overview page to control access to the product export page.</li> </ul> <p>3. Set up a Data export View Display for your Product data View</p> <ul> <li>Use the View Page dropdown menu to select the Duplicate as Data export option.</li> </ul> <p></p> <ul> <li>Under the PATH SETTINGS section of the view settings for this new Data export display, click on the Attach to link and select the original Page display. Once the data export display has been attached to the page display, a button will be added to the bottom of the page display, to be used to export the product data.</li> </ul> <p></p> <ul> <li> <p>Under the FORMAT section of the view settings, click on the Settings link for the Format. Specify the format and optional settings for the data export.</p> </li> <li> <p>Set the PAGER Items to display to Display all items.</p> </li> </ul> <p>After saving all your changes, you should be able to navigate to your new Product export view page and see a CSV (or other format) button in the lower left-hand corner of the page. Users with access to this page will be able to click on that button to export product data.</p> <p></p> <p>In the next section, we'll look at image management in Drupal.</p>"},{"location":"commerce2/developer-guide/products/product-management/#code-recipes","title":"Code recipes","text":"<p>If you want to write custom code to programatically create or manage products, you can use these code recipes as a starting point.</p> <p>Create:</p> <ul> <li>Products</li> <li>Variations</li> <li>Attribute values</li> </ul> <p>Load:</p> <ul> <li>Products</li> <li>Variations</li> <li>Attribute values</li> </ul> <p>Manage product attributes:</p> <ul> <li>Check if an attribute value exists</li> <li>Assign attribute values to a variation</li> <li>Alter the product title field label</li> </ul> <p>Creating products</p> <ul> <li>Since product variations are the purchasable parts of products, products need at least one variation.</li> <li>Since every product belongs to one or more stores, products need at least one store.</li> </ul> <pre><code>    /**\n     * uid [Integer]\n     *   Foreign key of the user that created the product.\n     *\n     * type [String] - [DEFAULT = default]\n     *   Foreign key of the product type being used.\n     *\n     * title [String]\n     *   The product title.\n     *\n     * stores [Array(\\Drupal\\commerce_store\\Entity\\StoreInterface)]\n     *   Array of stores this product belongs to.\n     *\n     * variations [Array(\\Drupal\\commerce_product\\Entity\\ProductVariationInterface)]\n     *   Array of variations that belong to this product.\n     */\n\n    // The variations that belong to this product.\n    $variations = [\n      $variation_blue_large,\n    ];\n\n    $product = \\Drupal\\commerce_product\\Entity\\Product::create([\n      'uid' =&gt; 1,\n      'type' =&gt; 'my_custom_product_type',\n      'title' =&gt; 'My Custom Product',\n      'stores' =&gt; [$store],\n      'variations' =&gt; $variations,\n    ]);\n    $product-&gt;save();\n\n    // You can also add a variation to a product using the addVariation() method.\n    $product-&gt;addVariation($variation_red_medium);\n    $product-&gt;save();\n\n    // Adding a variation to a product automatically creates a backreference on the variation.\n    // You can access the product of a variation via:\n    $variation-&gt;getProduct();\n</code></pre> <p>Creating variations</p> <pre><code>```php\n\n\n    /**\n    * type [String] - [DEFAULT = default]\n    *   Foreign key of the variation type to use.\n    *\n    * sku [String]\n    *   The sku for this variation.\n    *\n    * status [Bool] - [OPTIONAL, DEFAULTS TO TRUE]\n    *   [AVAILABLE = FALSE, TRUE]\n    *   Whether or not it's enabled or disabled. 1 for enabled.\n    *\n    * price [\\Drupal\\commerce_price\\Price] - [OPTIONAL]\n    *   The price for this variation.\n    *\n    * title [String] - [POTENTIALLY NOT REQUIRED]\n    *   The title for the product variation.\n    *   If the variation type is set to generate a title, this is not used.\n    *   Otherwise, a title must be given.\n    */\n    $variation = \\Drupal\\commerce_product\\Entity\\ProductVariation::create([\n    'type' =&gt; 'my_custom_variation_type',\n    'sku' =&gt; 'test-product-01',\n    'status' =&gt; TRUE,\n    'price' =&gt; new \\Drupal\\commerce_price\\Price('24.99', 'USD'),\n    ]);\n    $variation-&gt;save();\n\n```\n</code></pre> <p>Creating values for an attribute</p> <pre><code>```php\n\n    /**\n    * attribute [String]\n    *   Foreign key of the attribute we want.\n    *\n    * name [String]\n    *   The name of this value.\n    */\n    $red = \\Drupal\\commerce_product\\Entity\\ProductAttributeValue::create([\n    'attribute' =&gt; 'color',\n    'name' =&gt; 'Red',\n    ]);\n    $red-&gt;save();\n\n    $blue = \\Drupal\\commerce_product\\Entity\\ProductAttributeValue::create([\n    'attribute' =&gt; 'color',\n    'name' =&gt; 'Blue',\n    ]);\n    $blue-&gt;save();\n\n    $medium = \\Drupal\\commerce_product\\Entity\\ProductAttributeValue::create([\n    'attribute' =&gt; 'size',\n    'name' =&gt; 'Medium',\n    ]);\n    $medium-&gt;save();\n\n    $large = \\Drupal\\commerce_product\\Entity\\ProductAttributeValue::create([\n    'attribute' =&gt; 'size',\n    'name' =&gt; 'Large',\n    ]);\n    $large-&gt;save();\n```\n</code></pre> <p>Loading a product</p> <pre><code>```php\n\n    // Loading is based off of the primary key [Integer]\n    //   1 would be the first one saved, 2 the next, etc.\n    $product = \\Drupal\\commerce_product\\Entity\\Product::load(1);\n```\n</code></pre> <p>Loading a variation</p> <pre><code>```php\n\n    // Loading is based off of the primary key [Integer]\n    //   1 would be the first one saved, 2 the next, etc.\n    $variation = \\Drupal\\commerce_product\\Entity\\ProductVariation::load(1);\n```\n</code></pre> <p> nameLoading an attribute value</p> <pre><code>```php\n\n    // Loading is based off of the primary key [Integer]\n    //   1 would be the first one saved, 2 the next, etc.\n    $red = \\Drupal\\commerce_product\\Entity\\ProductAttributeValue::load(1);\n```\n</code></pre> <p>Checking if an attribute value exists within a particular attribute type</p> <pre><code>```php\n    // Look up while filtering by Attribute\n    $productAttributeId = \\Drupal::entityTypeManager()\n        -&gt;getStorage('commerce_product_attribute_value')\n        -&gt;getQuery()\n        -&gt;condition('attribute', 'attribute_machine_name')\n        -&gt;condition('field_value', field_value)\n        -&gt;execute();\n```\n</code></pre> <p>Assigning attribute values to a variation</p> <p>Let's say we want our hypothetical product to have two variations. One will be the color red and size medium, and the other will be the color blue and size large. - If a Product Variation Type has fields for attributes, then variations of that type MUST have those attributes.</p> <pre><code>    /**\n     * attribute_&lt;ATTRIBUTE_ID&gt; [\\Drupal\\commerce_product\\Entity\\ProductAttributeValueInterface]\n     *   The attribute value entity to use for the attribute type.\n     */\n    $variation_red_medium = \\Drupal\\commerce_product\\Entity\\ProductVariation::create([\n    'type' =&gt; 'my_custom_variation_type',\n    'sku' =&gt; 'product-red-medium',\n    'price' =&gt; new \\Drupal\\commerce_price\\Price('10.00', 'USD'),\n    'attribute_color' =&gt; $red,\n    'attribute_size' =&gt; $medium,\n    ]);\n    $variation_red_medium-&gt;save();\n\n    $variation_blue_large = \\Drupal\\commerce_product\\Entity\\ProductVariation::create([\n    'type' =&gt; 'my_custom_variation_type',\n    'sku' =&gt; 'product-blue-large',\n    'price' =&gt; new \\Drupal\\commerce_price\\Price('10.00', 'USD'),\n    'attribute_color' =&gt; $blue,\n    'attribute_size' =&gt; $large,\n    ]);\n    $variation_blue_large-&gt;save();\n</code></pre> <p>Altering the title field label</p> <p>The following example will change the label for the product name from Title to Product name.</p> <p></p> <pre><code>    use Drupal\\Core\\Entity\\EntityTypeInterface;\n\n    /**\n     * Implements hook_entity_base_field_info_alter().\n     */\n    function mymodule_entity_base_field_info_alter(&amp;$fields, EntityTypeInterface $entity_type) {\n        if ($entity_type-&gt;id() == 'commerce_product') {\n            // Change the title field label.\n            $fields['title']-&gt;setLabel(t('Product name'));\n        }\n    }\n</code></pre>"},{"location":"commerce2/developer-guide/products/product-management/#links-and-resources","title":"Links and resources","text":"<ul> <li>Drupal 8 User Guide documentation on Concept: Forms and Widgets</li> </ul>"},{"location":"commerce2/user-guide/","title":"Key Features","text":""},{"location":"commerce2/user-guide/#multiple-stores","title":"Multiple stores","text":"<p>Whether international, multi-regional, or a marketplace, Drupal Commerce allows multiple stores that have a specific currency and supported billing and shipping countries.</p>"},{"location":"commerce2/user-guide/#currencies","title":"Currencies","text":"<p>You can import multiple currencies. Coupled with Drupal's multilingual and internationalization tools, Drupal Commerce provides localized e-commerce.</p>"},{"location":"commerce2/user-guide/#products","title":"Products","text":"<p>@todo</p>"},{"location":"commerce2/user-guide/#order-workflows","title":"Order workflows","text":"<p>Not all orders are handled the same way. Orders in Drupal Commerce meet your order management needs. Whether digital, physical, or mixed each order can go through its own experience and workflow.</p>"},{"location":"commerce2/user-guide/#payments","title":"Payments","text":"<p>Whether you use PayPal, Braintree, Stripe, Authorize.net or any of the other many payment gateways, Drupal Commerce provides many integrations.</p>"},{"location":"commerce2/user-guide/#promotions","title":"Promotions","text":"<p>@@todo</p>"},{"location":"commerce2/user-guide/#taxes","title":"Taxes","text":"<p>Taxes? No problem. Out of the box support for EU VAT, Swiss VAT, Canadian GST, US Sales Tax or other custom tax rules.</p>"},{"location":"commerce2/user-guide/#checkout","title":"Checkout","text":"<p>@todo</p>"},{"location":"commerce2/user-guide/#shipping","title":"Shipping","text":"<p>@todo</p>"},{"location":"commerce2/user-guide/checkout/","title":"Checkout","text":"<p>! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/checkout/#configure-checkout","title":"Configure checkout","text":""},{"location":"commerce2/user-guide/checkout/#checkout-flows","title":"Checkout Flows","text":"<p>Checkout flow page is under Home &gt;&gt; Administration &gt;&gt; Commerce &gt;&gt; Configuration &gt;&gt; Orders &gt;&gt; Checkout flows</p> <p></p> <p>Drupal Commerce comes with a drag-and-drop checkout form builder that lets you decide what information you need to collect from or display to customers during the checkout process. It supports single and multi-page checkout depending on your requirements and can be easily extended with new components through the use of contributed or custom modules.</p> <p></p> <p>Content of panes is split in this 7 parts, but it can be modular, so you can drag and drop them as you wish or even disable them:</p> <ul> <li>Login - offers option for users to login or continue as guest, enables guest checkout</li> <li>Order information - the initial form used to collect basic order details</li> <li>Review - a review of all the order details with the pane for submitting paymen</li> <li>Payment -  used to select Transaction Mode - Authorize and capture or Authorize only</li> <li>Complete -  the final landing page showing the checkout completion message.</li> <li>Sidebar - order summary and coupon redemptions</li> <li>Disabled - Panes that you want to disable</li> </ul>"},{"location":"commerce2/user-guide/checkout/#order-information","title":"Order information","text":"<p>Contains from Contact information and Payment information.</p> <p>Contact information is only visible for anonymous users, allowing them to specify an e-mail address to use for their order.  For authenticated users, the pane is not shown, because Drupal Commerce initializes the order e-mail address field to the same e-mail address on file in their user account.</p> <p>Payment information checkout pane functions as an add / edit form for the billing customer profile to be associated with the order. By default, this pane will always result in the creation of a new billing customer profile, with addressbook functionality like reusing previous addresses being supplied by a contributed module.</p>"},{"location":"commerce2/user-guide/checkout/#review","title":"Review","text":"<p>This checkout pane displays a full summary of the order details, including data from any other checkout pane on the form that exposes it to this pane. It will include by default the cart contents again, the user's account information, and the billing address. Other checkout panes may or may not expose data to this pane, and any that does may be directed to the relevant checkbox on the pane's configuration form.</p>"},{"location":"commerce2/user-guide/checkout/#payment","title":"Payment","text":"<p>This checkout pane presents all payment methods available to the customer in a radio select list.</p>"},{"location":"commerce2/user-guide/checkout/#completion-message","title":"Completion message","text":"<p>This checkout pane displays a simple checkout completion message that links to the order details page in the user's account. Even anonymous users will be able to view their completed orders for the duration of their current session. The checkout completion message is configurable via the pane's configuration form for single language sites, but multilingual sites will want to leave it set to the default message and translate the default string to the desired message through the translation interface.</p>"},{"location":"commerce2/user-guide/checkout/#controling-guest-checkout","title":"Controling guest checkout","text":"<p>By default your site will allow guest checkouts. You can change this and only allow registered users to checkout and/or allow users to register before they checkout. You can change this setting on a per Checkout Flow basis, so you can allow guest checkouts for some flows and not others as you need.</p>"},{"location":"commerce2/user-guide/checkout/#how-to-enable-disable-guest-checkout","title":"How to enable / disable Guest Checkout","text":"<p>Visit the Commerce configuration page and go to the Checkout Flows section.</p> <p></p> <p>Click Edit on the Checkout Flow you want to configure.</p> <p></p> <p>To Enable Guest Registration</p> <ul> <li>Click the cog icon in the Login or continue as guest</li> <li>Check the Allow guest checkout box, click update and then Save at the bottom of the page.</li> </ul> <p>To Disable Guest Registration</p> <ul> <li>Click the cog icon in the Login or continue as guest</li> <li>Uncheck the Allow guest checkout box, click update and then Save at the bottom of the page.</li> </ul> <p></p> <p>Your first checkout page will then have the below sections, its exact appearance will vary as the below image uses the Bootstrap theme.</p> <p></p>"},{"location":"commerce2/user-guide/checkout/#allow-registration-during-checkout","title":"Allow registration during checkout","text":"<p>You can restrict checkout to just users with accounts. You can then either completely deny checkout access to users without accounts or require them to create an account before they can checkout.</p> <p>You can change this setting on a per Checkout Flow basis, so you can deny guest checkouts for some flows and not others as you need.</p>"},{"location":"commerce2/user-guide/checkout/#enable-disable-account-registration-at-checkout","title":"Enable / Disable Account Registration at Checkout","text":"<p>Visit the Commerce configuration page and go to the Checkout Flows section.</p> <p></p> <p>Click Edit on the Checkout Flow you want to configure.</p> <p></p> <p>To Allow Registration at Checkout</p> <ul> <li>Click the cog icon in the Login or continue as guest</li> <li>Uncheck the Allow guest checkout box</li> <li>Check the Allow registration box</li> <li>Click Update and then Save at the bottom of the page.</li> </ul> <p></p> <p>With a Boostrap theme your page will look something like the below:</p> <p></p> <p>To Deny Registraion at Checkout</p> <ul> <li>Click the cog icon in the Login or continue as guest</li> <li>Uncheck the Allow guest checkout box</li> <li>Uncheck the Allow registration box</li> <li>Click Update and then Save at the bottom of the page.</li> </ul> <p></p> <p>With a Boostrap theme your page will look something like the below.</p> <p></p>"},{"location":"commerce2/user-guide/checkout/#allow-guests-to-create-an-account-during-the-checkout-process","title":"Allow guests to create an account during the checkout process","text":"<p>To give your customers the ease of creating an account at the end of their checkout you need to enable the \"Guest Registration after checkout\" pane in your checkout flow.</p> <p>! At the time of writing your site will not have this feature by default. You need to apply the latest good patch from this issue. The below instructions will then apply to your site.</p>"},{"location":"commerce2/user-guide/checkout/#enable-disable-account-registration-at-checkout_1","title":"Enable / Disable Account Registration at Checkout","text":"<p>You need to enable / disable registration for each Checkout Flow you are using.</p> <p>Visit the Commerce configuration page and go to the Checkout Flows section.</p> <p></p> <p>Click Edit on the Checkout Flow you want to configure.</p> <p></p> <p>To Enable Guest Registration</p> <ul> <li>Locate the \"Disabled\" section and drag the Guest registration after checkout into the \"Complete\" section and click Save.</li> </ul> <p>To Disable Guest Registration</p> <ul> <li>Locate the \"Complete\" section and drag the Guest registration after checkout into the \"Disabled\" section and click Save.</li> </ul> <p></p>"},{"location":"commerce2/user-guide/currencies/","title":"Adding a currency","text":""},{"location":"commerce2/user-guide/currencies/#overview","title":"Overview","text":"<p>Drupal Commerce uses the internationally-recognized standard of CLDR data to provide multiple currency support. Currencies are formatted based on the locale of a language, giving a true localized experience. All of this is possible due to the underlying multilingual and localization capabilities of Drupal.</p>"},{"location":"commerce2/user-guide/currencies/#adding-a-new-currency","title":"Adding a new currency.","text":"<p>Visit the Commerce configuration page and go to the Currencies page in the Store section.</p> <p></p> <p>The currencies page shows a list of all currencies currently added. To add a currency, such as the Canadian Dollar, click on + Add currency. The next form will provide you with a list of available currencies to import. Select your currency and click Add</p> <p></p>"},{"location":"commerce2/user-guide/currencies/#editing-currencies","title":"Editing Currencies","text":"<p>While not common, sometimes you may wish to modify a currency that was added. Once a currency is added, you can click Edit to modify the currency.</p> <p></p>"},{"location":"commerce2/user-guide/orders/","title":"Orders","text":"<p>@todo ! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/orders/#create-an-order","title":"Create an order","text":"<p>Orders can be created for customers in the administrative areas. This can be done by going to the Orders management page from the Commerce page from the administrative toolbar. Click on Create  a new order.</p> <p></p> <p>When creating an order you select the store it is for and specify a customer.</p> <p></p> <p>Instead of re-using a customer, a new one can be created.</p> <p></p> <p>Click Create. You will then be able to provide information about the order. The first items will allow you to provide billing information for the order. You can also specify if the order is a cart or not. By marking the order as a cart, the customer will able to review the cart and go through the checkout with it.</p> <p></p> <p>Next, order items can be created. The order items are the products the customer is purchasing.</p> <p></p> <p>Once satisfied, click Save</p> <p>@todo Need to add documentation for adjustments and coupons.</p> <p>@todo We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/orders/#view-carts","title":"View carts","text":""},{"location":"commerce2/user-guide/orders/#view-orders-find-specific-ones","title":"View orders, find specific ones.","text":""},{"location":"commerce2/user-guide/orders/#manage-and-order","title":"Manage and order","text":"<p>@todo We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/orders/#order-workflows","title":"Order workflows","text":"<p>High level explanation of \"draft\" orders, workflows.</p> <p>@todo We need help filling out this section! Feel free to follow the edit this page link and contribute.</p> <p>Explain what a workflow is (states and transitions) at a high level. </p> <p>Detail what ones are provided by Drupal Commerce and when or why you may use one.</p> <p>How to change an order's workflow.</p>"},{"location":"commerce2/user-guide/orders/#processing-an-order","title":"Processing an order","text":"<p>@todo We need help filling out this section! Feel free to follow the edit this page link and contribute. @todo</p> <p>How someone would process an order in a workflow.</p> <p>Use the example of \"with validation\" for \"in validation, ensure payment is not fraudulent / captured, then mark validated\"</p> <p>Use the example of shipping, validated because it has stock. Completed because shipped.</p>"},{"location":"commerce2/user-guide/orders/#receipt-emails","title":"Receipt emails","text":"<p>These settings are managed on an Order Type basis so that you can have different settings for different types of orders and manage order notifications in a granular way.</p>"},{"location":"commerce2/user-guide/orders/#enable-disable-customer-order-receipts-store-notification-emails","title":"Enable / Disable Customer Order Receipts &amp; Store Notification Emails","text":"<p>Visit the Commerce configuration page and go to the Order types page in the Orders section.</p> <p></p> <p>Click on Edit on the order type you wish to configure</p> <p></p> <p>Locate the Emails section</p> <p></p> <ul> <li>Check / uncheck the Email the customer a receipt when an order is placed box.</li> <li>Enter the store notification email address into the Send a copy of the receipt to this email: field. You can enter multiple comma separated addresses into this field eg \"one@example.com, two@example.com, three@example.com\"</li> </ul>"},{"location":"commerce2/user-guide/orders/#editing-translating-the-email-text","title":"Editing / Translating the Email Text","text":"<p>Use the template file located in <code>/commerce/modules/order/templates/commerce-order-receipt.html.twig</code>.</p> <p>You can copy this file to your theme and then edit the text as desired. You can also use the file as a translation reference when searching for strings to translate in the user interface translation UI.</p>"},{"location":"commerce2/user-guide/payments/","title":"Payments","text":"<p>In order to accept payments you need to create a payment gateway for your store. Unless you choose a manual gateway you need to first install the relevant module for your chosen payment provider (PayPal, Stripe, Braintree etc.).</p> <p>After you've installed the module(s) go to /admin/commerce/config/payment-gateways to create and configure your payment gateway(s).</p> <p>Click 'Add payment gateway', choose your provider from the plugin list and complete the form fields that appears below.</p>"},{"location":"commerce2/user-guide/payments/#authorization","title":"Authorization","text":""},{"location":"commerce2/user-guide/payments/#create-an-authorization","title":"Create an authorization","text":"<p>todo We need help filling out this section! Feel free to follow the edit this page link and contribute.</p> <p>Some gateways will support backend payment entry. Especially manual payments.</p>"},{"location":"commerce2/user-guide/payments/#voiding-an-authorization","title":"Voiding an authorization","text":"<p>In order to cancel an authorization we 'Void' it. For example, on travel sites, normally when a customer adds a trip request, a payment authorization is added to the order. It is only when the trip is confirmed that the authorization becomes a charge. </p> <p>Similary, in our case, let's say we had added a payment authorization for an order. However, upon processing the order, we notice that the item is out of stock. We now need to 'Void' the payment. Voiding payments are quite easy. Just as before, you first need to locate the order. Then, as you did before, click on the <code>Payments</code> tab and locate the authorized payment.</p> <p></p> <p>Click the <code>Void</code> link and confirm that you want to void the payment.</p> <p></p> <p>Once you confirm, the payment page should look like this, with a \"(Voided)\" added next to the payment that you just voided.</p> <p></p>"},{"location":"commerce2/user-guide/payments/#capture-an-authorization","title":"Capture an authorization","text":"<p>Payments can be authorized during the checkout flow and captured separately by store administrators at a later time (e.g., when a shipment is sent to fulfillment, when a shipment is shipped, or when a shipment is delivered). Note: not all payment gateways support this feature. Store administrators will only have the ability to capture a prior payment authorization if the payment gateway was configured for this type of transaction at the time the order was placed.</p> <p>To capture a prior payment authorization for an order, navigate to the Orders management page from the Commerce menu using the administrative toolbar. Search or browse for the order with a prior payment authorization to be captured. Expand the operations popup and click Payments from the menu or click the hyperlinked order number to open the order view page then click the Payments tab to view the order payments.</p> <p></p> <p>Click the Capture button from the operations popup to view the Capture payment page.</p> <p></p> <p>Update the Amount field as needed. Click the Capture button to submit the form and transmit the capture request to the payment gateway.</p> <p></p> <p>If the capture request was successful, a success message will be displayed on the order payments page. Additionally, the payment state will be updated to Completed.</p>"},{"location":"commerce2/user-guide/payments/#manage-payments","title":"Manage payments","text":"<p>s a store administrator there are times where you often find yourself having to manage orders and payments on behalf of customers. Some customers might call in to modify their saved credit cards, or you might need to refund or capture payments for orders. With Drupal Commerce, you get a nice interface that let's you manage order payments and authorizations with ease.</p>"},{"location":"commerce2/user-guide/payments/#capturing-a-payment","title":"Capturing a payment","text":"<p>Let's assume a scenario where the customer calls in and requests to make a change to their order. Let's say they wanted to modify the quantity ordered for one of the products. Instead of 1 quantity, they now want 2 of this item. As an admin you can go ahead and edit the item and enter \"2\" for the quantity. However, you now have a changed order total. You need to request more payment from the customer.</p> <p>Capturing payments for an order is done from the Payments tab above.</p> <p></p> <p>Notice, the payments that have already been captured for our example order, is displayed in the page. For this order, the customer has already paid $118.08, now a difference of $30.74 needs to be paid. Click on the <code>Add payment</code> button.</p> <p></p> <p>Now, select the payment type and continue with the prompt.</p> <p></p> <p>Once the payment is successful, you'll be notified and the new payment will be added to the list.</p> <p></p>"},{"location":"commerce2/user-guide/payments/#refunding-a-payment","title":"Refunding a payment","text":"<p>Payments can be refunded when they've been authorized and captured. There maybe times when you've already taken payment but need to refund an order, either due to lack of stock, damaged product, cancelled order, or some other reason. Similar to voiding payments, refunding payments follow the same process. You locate the order, click the <code>Payments</code> tab, find the captured payment and hit the <code>Refund</code> link. You'll be taken to a confirmation page.</p> <p></p> <p>Once you confirm the refund, the payment will be refunded to the customer and the refunded payment would look like this.</p> <p></p>"},{"location":"commerce2/user-guide/products/","title":"Products","text":"<p>Products in Drupal Commerce are designed to meet your needs. Whether you are selling clothing which has different sizes or colors, bed sheets with various thread counts, or products with various billing terms, Drupal Commerce can support your product model.</p>"},{"location":"commerce2/user-guide/products/#before-you-begin","title":"Before you begin","text":"<p>The following is an introduction to terminology used in Drupal Commerce before you begin. </p> Term What does it mean? Attribute Something about the product which creates a unique choice. For clothing this would be the color and size. A subscription may have monthly or annual billing options. Variation A product variation represents an option of specific attributes for a product. For example, the Large Blue sweatshirt versus the Medium Red sweatshirt Product The actual product, a sweatshirt, which contains all of its variations"},{"location":"commerce2/user-guide/products/#product-example","title":"Product example","text":"<p>Before you begin adding products to your Drupal Commerce store, it is important to understand the product structure. Let us go through an example.</p> <p>Let us say that your store sells t-shirts. Your t-shirts come in various sizes; such as small, medium, large, and extra large. Each shirt has a graphic but can come in different colors. Each graphic t-shirt is its own product but has its variations of colors available.</p> <p>How does that translate into Drupal Commerce?</p> <ul> <li>There is a t-shirt product type</li> <li>There is a size product attribute</li> <li>There is a color product attribute</li> <li>Each graphic t-shirt will be its own product, with variations of color and size.</li> </ul> <p>The following table is an example of variations that could be for a Drupal Commerce Cart graphic t-shirt.</p> Product Size Color Cart graphic Small Grey Cart graphic Small White Cart graphic Small Black Cart graphic Medium Grey Cart graphic Medium White Cart graphic Medium Black Cart graphic Large Grey Cart graphic Large White Cart graphic Large Black Cart graphic Extra Large Grey Cart graphic Extra Large White Cart graphic Extra Large Black <p>We have now defined the product attributes which need to be created. Read here to learn about how to create, edit, and making some attributes optional</p> <p>We will need a product variation type and product type for our t-shirt, which we discuss in Manage product structure.</p> <p>Finally, you can create products! Follow the directions in this section on the most common use cases.</p>"},{"location":"commerce2/user-guide/products/#configure-product-attributes","title":"Configure product attributes","text":"<p>! We need updated screenshots. Feel free to follow the edit this page link and contribute.</p> <p></p> <p>Imagine you need to sell a DrupalCon t-shirt. This t-shirt comes in different sizes and colors. Each combination of size and color has its own SKU, so you know which color and size the customer has purchased and you can track exactly how many of each combination you have in stock.</p> <p>Color and size are product attributes. Blue and small are product attribute values, belonging to the mentioned attributes. The combination of attribute values (with a SKU and a price) is called a product variation. These variations are grouped inside a product.</p>"},{"location":"commerce2/user-guide/products/#creating-attributes-and-their-values","title":"Creating Attributes and their Values","text":"<p>For our t-shirt we need two attributes: color and size. Let's start by creating the color attribute. Go to the Drupal Commerce administration page and visit the Product Attributes link.</p> <p></p> <p>Click on the Add product attribute link to create an attribute.</p> <p></p> <p>After you have created the color attribute, we need to define at least one value. Normally we would simply say the color is \"blue\" or \"red\" but sometimes you might need to further define the attribute using fields. Adding fields is covered in detail later on in the documentation.</p> <p>The product attribute values user interface allows creating and re-ordering multiple values at the same time and a very powerful translation capability:</p> <p></p> <p>Next, you will need to add the attribute to the product variation type. You can find these at <code>/admin/commerce/config/product-variation-types</code> and you just need to add/edit a product variation type that requires your new attribute.</p> <p></p> <p>After you have added \"Color\" and the various colors your t-shirts are available in, the next step is to add that \"color\" attribute to our product. Store administrators can do this on the product variation type form, the checkbox in the last step automatically created entity referenced fields as needed:</p> <p></p>"},{"location":"commerce2/user-guide/products/#adding-fields-to-attributes","title":"Adding fields to Attributes","text":"<p>Product attributes are so much more than a word. Often times they represent a differentiation between products that is useful to call out visually for customers. The fieldable attribute value lets the information architect decide what best describes this attribute. Like any other fieldable entity, you can locate the list of attribute bundles and click edit fields:</p> <p><code>/admin/commerce/product-attributes</code></p> <p></p> <p>Add a field as you would expect. Most fields are supported and will automatically show up when you go to add attribute values:</p> <p></p>"},{"location":"commerce2/user-guide/products/#editing-attributes","title":"Editing Attributes","text":"<p>Editing the attribute values is pretty easy. Simply locate the attribute type that has the values you want to edit: <code>/admin/commerce/product-attributes</code> And click \"edit\" and you will be taken to a screen to edit all the attributes of that type.</p>"},{"location":"commerce2/user-guide/products/#optional-attributes","title":"Optional Attributes","text":"<p>After creating attributes, the product variation type needs to know that it uses the attribute. The product variations are at <code>/admin/commerce/config/product-variation-types</code> and once you've clicked on the attribute you want...</p> <p></p> <p>Fields are added to the variation type that can then be modified. By default, all attribute fields are required. If your attribute is optional (perhaps some of the drupalcon t-shirts only come in blue), then you can locate the manage fields of your particular product variation type and make the <code>color</code> attribute optional by following these steps:</p> <ol> <li>Go to <code>/admin/commerce/config/product-variation-types</code></li> <li>Click the drop down next to the variation type you want and click    \"manage fields\" </li> </ol> <p> 3. Un-select the \"required\" checkbox to make the attribute optional.</p> <p></p>"},{"location":"commerce2/user-guide/products/#manage-product-structure","title":"Manage product structure","text":"<p>This guide assumes you have created your product attributes, or understand how they are used after reading how to configure product attributes</p>"},{"location":"commerce2/user-guide/products/#create-a-product-variation-type","title":"Create a product variation type","text":"<p>Following the example of having a t-shirt, the first step is to create a new product variation type for our t-shirt. Go to <code>admin/commerce/config/product-variation-types</code></p> <p></p> <p>Click Add product variation type</p> <p></p> <p>This will open a form.</p> <p></p> <p>Now we will add image field to our product variation.</p> <p>Click on Manage fields and then click on Add field</p> <p></p> <p>Now select field type Image under Reference.</p> <p></p> <p>Then click on Save and continue. Then save the settings for image field.</p> <p>In these steps we added an image field to the variation. This allows us to upload a picture of the t-shirt based on its color. As the customer chooses a color to purchase, it will show that image.</p>"},{"location":"commerce2/user-guide/products/#create-a-product-type","title":"Create a product type","text":"<p>Next, we need to create our product type for our t-shirts. Go to <code>admin/commerce/config/product-types</code>.</p> <p></p> <p>Click on Add product type</p> <p></p> <p>This will open a form.</p> <p></p> <p>Save settings and this will create our T-shirt product type.</p>"},{"location":"commerce2/user-guide/products/#create-a-product","title":"Create a product","text":"<p>To create a product go to the Products management page from the Commerce item in the administrative menu. Click on \"Add Product.\" If you have multiple product types, you will need to select the type of product that you are creating.</p> <p></p> <p>The form will provide various sections for providing information about the product. First we will provide a Title, the product's name, and then a description about the product in the Body field. </p> <p></p> <p>On the right side of the form we can control additional information about the product. </p> <ul> <li>The stores the product is available to be purchased in. If there is only one store, you will not see the store visibility setting. </li> <li>The path alias (URL) to use for accessing the product. </li> </ul> <p></p> <p>By setting the URL alias to <code>/supreme-graphic-t</code> the product can be visited at <code>www.example.com/supreme-graphic-t</code> rather than <code>www.example.com/product/1234</code></p> <p>Next we create our variations for the product. The variations are the options available for purchase. Provide a SKU, Price, and other required fields. When done, click on Create variation</p> <p></p> <p>Click Add new variation to add a new variation. Follow the previous process and repeat until satisified that all purchasable options are displayed.</p> <p></p> <p>Finally, click Save to create the product.</p> <p></p>"},{"location":"commerce2/user-guide/products/#edit-a-product","title":"Edit a product","text":"<p>Products can be edited by going to the products overview page and selecting to edit an existing product. When the products are in the table there will be operation links which allow you to edit the product.</p> <p></p> <p>The form will allow you to modify the existing information for the product.</p> <p></p> <p>To manage variations, you just need to click Edit for its entry.</p> <p></p>"},{"location":"commerce2/user-guide/products/#delete-a-product","title":"Delete a product","text":"<p>Sometimes you may wish to delete a product or one of its variations. Before deleting a product or  variation, consider unpublishing the product or disabling the variation.</p>"},{"location":"commerce2/user-guide/products/#disabling-a-product-variation","title":"Disabling a product variation","text":"<p>This will prevent the product variation from being displayed or purchased, but will leave it in the system  should you want to re-enable it at a later point.</p> <p>A product's variation is disabled while editing the product. Click on the variation's Edit button.  Locate the Active checkbox on the Variation form and uncheck it. Click Update Variation to  complete the process. The product variation will no longer be available to purchase on your site.</p> <p></p>"},{"location":"commerce2/user-guide/products/#deleting-a-product-variation","title":"Deleting a product variation","text":"<p>A product's variation is deleted while editing the product. Click on the variation's Remove button.  A confirmation form will display. Click Remove once more to confirm.</p> <p></p>"},{"location":"commerce2/user-guide/products/#deleting-entire-product","title":"Deleting entire product","text":"<p>A product can be deleted by editing it. At the bottom of the form there is a Delete link, which  will display a confirmation form. Click Delete once more to confirm deletion. All variations will  also be deleted.</p> <p></p>"},{"location":"commerce2/user-guide/promotions/","title":"Promotions","text":"<p>The competitive nature of the current retail market has driven store owners to search for methods and strategies to stand out from the competition and to drive sales. Creating promotions has been the strategy that has proven most effective for achieving those two goals.</p> <p>Drupal Commerce Core provides powerful pricing options that store administrators can leverage to turn their innovative promotion ideas into reality. Promotions and coupons give us the ability to configure pricing rules to meet the store's needs. Before we delve into the process of creating promotions and coupons, let's first get some basic understanding of these terms.</p> <ul> <li>Promotion - a pricing strategy to increase/boost customer sales. It can include product-based discounts or discounts on the entire order. An unlimited number of promotions can be added. They are applied based on the weight that you give each promotion. Promotions with a lower weight are applied first.</li> <li>Offer - the actual discount that customers will receive. For example, a \"10%\" discount.</li> <li>Condition - the requirements that need to be met for the promotion to apply. For example, the offer will only apply if the order total is greater than \"$100\".</li> <li>Compatibility - whether the promotion can be combined with other promotions.</li> <li>Coupon - a promotion that applies only if the customer adds a matching voucher code during checkout.</li> </ul> <p>Imagine that your store is planning to run a special New Year campaign where you'd like to give customers a 10% discount on orders worth $50 or more. You'd like to set up the promotion ahead of time and limit it to a specific date range. With the default offers and conditions provided by the promotion system, it is quite simple.</p>"},{"location":"commerce2/user-guide/promotions/#adding-a-new-promotion","title":"Adding a New Promotion","text":"<ul> <li>You can create a new promotion by going to <code>/admin/commerce/promotions</code> and clicking the \"Add promotion\" button.</li> </ul> <ul> <li> <p>Give your promotion a descriptive name, for example, \"10% off on $50 or more orders\".</p> </li> <li> <p>If you would like to use a different name for what customers will see on their order/cart, enter a \"Display name\", for example, \"10% Off Storewide Sale\". If the display name is set, only administrative users will see the \"Name\" of the promotion.</p> </li> <li> <p>Optionally, you can also enter a description for the promotion. This description can only be viewed by administrative users, not customers.</p> </li> </ul> <p></p>"},{"location":"commerce2/user-guide/promotions/#setting-the-offer","title":"Setting the Offer","text":"<ul> <li>Let's now decide on the type of offer you'd like to give users. As our goal is to give customers a 10% discount on orders worth $50 or more, let's select the \"Percentage off the order subtotal\" option under <code>Offer type</code>. Notice that whenever you change the offer type, the form changes below the list of options to provide additional inputs.</li> <li>Now enter the percentage you'd like to give the customer as the \"Percentage off\". For this example, we enter \"10\".</li> </ul> <p>Note</p> <p>See the Edit a promotion documentation page for a description of all Offer types provided by Drupal Commerce core. Note that additional offer types can be created in custom code by a developer. See the Create an offer type page in the Developer guide for documentation and example code.</p>"},{"location":"commerce2/user-guide/promotions/#adding-conditions","title":"Adding Conditions","text":"<p>The conditions section allows you to further manage the promotions so that you can tell the system to apply the promotion only if the order meets certain criteria. There are three categories of Conditions: Customer, Order, and Products. Click on each to see condition options in that category. You can specify multiple conditions. For this example, we want to add a condition so that our promotion will only apply to orders worth $50 or more. This is the \"Current order total\" condition, an \"Order\" condtion. Similar to the \"Offer type\" options, whenever we select a Condition type, a new form will appear under that condition. We'll select the \"Greater than or equal to\" Operator and enter \"50\" as the Amount:</p> <p></p> <p>At the end of the Conditions section of the page, you can specify whether \"all conditions must pass\" or \"only one condition must pass\". Since our example promotion has only one Condition, it doesn't matter which option we select. We'll leave it set to the default, \"all conditions must pass\":</p> <p></p> <p>Note</p> <p>See the Edit a promotion documentation page for a description of all Condition types provided by Drupal Commerce core. Note that additional condition types can be created in custom code by a developer. See the Create a condition page in the Developer guide for documentation and example code.</p>"},{"location":"commerce2/user-guide/promotions/#additional-configuration","title":"Additional Configuration","text":"<p>On the right-hand side of the page, you'll see options for setting additional limitations on the promotion. For this example, we stated that we wanted to limit our promotion to a specific date range. So we'll enter a Start date of \"12/31/2021\" at \"10:00 PM\" and an End date of \"1/7/2020\" at \"11:59 PM\", right before midnight. To do so, we need to enable the \"Provide an end date\" option by clicking the checkbox.</p> <p></p> <p>Note that the date and time constraints are applied based on the Timezone of the Store, not that of the customer.</p>"},{"location":"commerce2/user-guide/promotions/#testing-the-promotion","title":"Testing the Promotion","text":"<p>Now, that you've entered the necessary conditions let's \"Save\" the promotion. You can test this out by adding a product or a number of products to the cart. Once the order total reaches $50 or more, note, a discount is automatically applied to the order total.</p> <p></p> <p>Tip</p> <p>If you want to test a promotion before it goes live, use the \"Customer role\" Condition to temporarily require an administrative role. Then you can safely enable and test a promotion without exposing it to customers. In this example, you would also need to adjust the starting date to allow orders during the testing period. Just remember to restore the correct starting date and remove the Customer role condition after testing and before it needs to go live!</p>"},{"location":"commerce2/user-guide/promotions/#edit-a-promotion","title":"Edit a promotion","text":"<p>After creating a promotion, you can make updates by editing its various configuration options. The Create a promotion documentation page provides an introduction to those options; this page provides a more comprehensive summary.</p>"},{"location":"commerce2/user-guide/promotions/#updating-names-and-description","title":"Updating Names and Description","text":"<p>The \"Name\", \"Display name\", and \"Description\" fields can be updated after a promotion is created, even if the promotion is already active. However, if the promotion has already been applied to existing orders, the name that customers see on their order/cart may or may not be updated, depending on the state of the order.</p> <ul> <li>If the order has already been placed, the promotion name will not be updated.</li> <li>If the order is still an in-progress shopping cart, the promotion name will be updated.</li> </ul>"},{"location":"commerce2/user-guide/promotions/#offer-types","title":"Offer types","text":"<p>Commerce Core includes five different offer types. The Commerce Shipping module, if installed, provides two additional offer types. When the Offer type is changed, the \"Offer\" form below the list of options will be updated with configuration options specific to the offer type.</p>"},{"location":"commerce2/user-guide/promotions/#fixed-amount-or-percentage-off-the-order-subtotal","title":"Fixed amount or Percentage off the order subtotal","text":"<p>The two simplest offer types are, \"Fixed amount off the order subtotal\" and \"Percentage off the subtotal\". For the \"Fixed amount\" offer, enter the exact amount that should be deducted from the order subtotal. If your site has multiple currencies installed, you will need to specify the currency in addition to the amount.</p> <p></p> <p>For the \"Percentage\" offer, enter the percentage that should be applied to the order subtotal to calculate the discount amount. Decimal amounts can be entered. For example, enter, \"1.5\" for a 1.5% discount amount. If the subtotal amount is $1,000.00, the discount will be $15.00.</p> <p></p>"},{"location":"commerce2/user-guide/promotions/#fixed-amount-or-percentage-off-each-matching-product","title":"Fixed amount or Percentage off each matching product","text":"<p>These offer types are similar to the Fixed amount and Percentage off the order subtotal offer types but offer additional options for how the discounts are displayed and applied to individual order items.</p> <p></p>"},{"location":"commerce2/user-guide/promotions/#display-options","title":"Display options","text":"<ul> <li>Use the Display options to control whether displayed unit prices for individual order items remain unchanged or adjusted by discount amounts.</li> </ul>"},{"location":"commerce2/user-guide/promotions/#application-options","title":"Application options","text":"<p>Use the Application options to limit the application of the discount to only order items that match your criteria.</p> <ul> <li>Specific products: Enter the titles for one or more products, separated by commas.</li> <li>Specific product variation: Enter either titles or SKUs for one or more product variations, separated by commas.</li> <li>Product categories: For any product types with custom fields that reference taxonomy terms, enter one or more term names, separated by commas. The discount will be applied to products that reference those terms. For example, suppose you have a \"Product catalog\" taxonomy with terms like \"Clothing\", \"Electronics\", \"Toys\", etc. You could use this offer type to create discounts that only apply to products classified as \"Toys\".</li> <li>Product types and product variation types: if only a few options exist, you will see checkbox options for the product/variation types; otherwise, enter the names of the product/variation types, separated by commas.</li> </ul>"},{"location":"commerce2/user-guide/promotions/#buy-x-get-y","title":"Buy X Get Y","text":"<p>The Buy X Get Y offer type provides discounts for 1 or more items in the customer's cart based on the existence of other items in the cart. The first part of the configuration form is the, \"Customer buys\" section. Use this section to specify what must exist in the cart in order for the discount to apply:</p> <p></p> <p>The \"Quantity\" value can be any non-negative integer or decimal amount. The \"Matching\" criteria are the same as the Application options described in the previous section.</p> <p>The next section of the form, labeled, \"Customer gets\", specifies additional items that: 1. Must be in the cart for the discount to apply, and 2. If present, will be discounted.</p> <p>Again, there is a \"Quantity\" value and \"Matching\" criteria for these items.</p> <p>Finally, the third section of the form, labeled, \"At a discounted value\", specifies whether the items that are discounted should be discounted based on a Percentage or Fixed amount. See the explanation above for Fixed amount or Percentage off the order subtotal offer types for more information.</p> <p></p> <p>Example: Buy 3 get 1 free for Product X</p> <p>Suppose you create a promotion with a \"Buy X Get Y\" offer type configured as follows:</p> <ul> <li>Customer buys quantity: 3</li> <li>Matching specific products: Product X</li> <li>Customer gets quantity: 1</li> <li>Matching specific products: Product X</li> <li>At a discounted value percentage off: 100</li> </ul> <p>Then the following logic will be applied:</p> <ul> <li>If the customer has less than 4 units of Product X in his cart, no discount will be applied.</li> <li>If the customer has 4-7 units of Product X in his cart, 1 of those items will be free (100% discount).</li> <li>If the customer has 8-11 units of Product X in his cart, 2 of those items will be free, and so on.</li> </ul>"},{"location":"commerce2/user-guide/promotions/#fixed-amount-or-percentage-off-the-shipment-amount","title":"Fixed amount or Percentage off the shipment amount","text":"<p>The Commerce Shipping module, if insalled, provides these two offer types which work just like the Fixed amount or Percentage off the order subtotal offer types. However, instead of applying the discount to the subtotal, the discount is applied to the Shipping amount. By entering \"100\" as the percentage amount, a \"Free shipping\" discount can be created.</p> <p>Other custom or contributed modules can also define additional offer types or selection criteria.</p>"},{"location":"commerce2/user-guide/promotions/#conditions","title":"Conditions","text":"<p>Add conditions to a promotion to create limitations for its discount offer. Conditions are grouped into three categories: Customer, Order and Products. Like Offer Types, selecting a Condition triggers the display of a configuration form specific to that condition. Promotions can have any number of conditions. </p> <p>For example, here we've selected two Customer conditions. The Customer role has been set to \"Authenticated user\", so the customer must be logged in for the discount to apply. And the Billing address has been limited to the country of Sweden, so the discount will only apply to orders with Swedish billing addresses. \"Customer email\" is another Customer condition, but it has not been enabled for this example promotion.</p> <p></p> <p>Order conditions allow you to limit the promotion by the total price of the order, currency, or selected payment gateway.</p> <p>Product conditions allow you to limit the promotion based on the items that have been added to the cart or by the quantity of products the customer purchases. You can use the autocomplete to enter a comma separated list of products to apply the promotion to.</p>"},{"location":"commerce2/user-guide/promotions/#all-conditions-vs-only-one-condition-must-pass","title":"All conditions vs. Only one condition must pass","text":"<p>If multiple conditions have been added to the order, use this option to control whether all or only one of the conditions must be TRUE for the promotion to apply.</p> <p>If more complex logic is required for your promotions, custom or contributed modules can be installed to provide specialized conditions or order processors.</p>"},{"location":"commerce2/user-guide/promotions/#start-and-end-dates","title":"Start and End dates","text":"<p>The Create a promotion documentation page provides an example of setting the Start and End date for a promotion. The Start date is required but can be set to the current date and time if you want the promotion to be immediately available.</p> <p>Date and time constraints are applied based on the timezone of the Store, not the customer's timezone.</p>"},{"location":"commerce2/user-guide/promotions/#usage-limitations","title":"Usage limitations","text":"<p>A promotion can also be limited based on total usage or on a per user basis. For example, here we've limited a promotion so that it's available to only the \"first 1000 customers\", and each customer can only use the discount once. </p> <p></p> <p>Customer usage is tracked based on email address. If the customer is shopping as a guest and his email address is not yet known, customer usage will not be factored into the logic for determining whether the promotion applies. Once a guest customer enters an email address or logs in, a previously applied discount will be removed if its application would violate the customer usage limit.</p>"},{"location":"commerce2/user-guide/promotions/#compatibility-options","title":"Compatibility options","text":"<p>Compatibility options allow you to specify whether the promotion can be combined with other promotions.</p> <p></p> <ul> <li>Once a promotion that is not compatible with other promotions is added to an order, no other promotions will be added.</li> <li>If a promotion that is compatible with any promotion is added to an order, then any subsequent promotions with limited compatibility will not be added to the order.</li> </ul> <p>See the Promotions table documentation for information on how to manage the order in which promotions are added to an order.</p>"},{"location":"commerce2/user-guide/promotions/#coupons","title":"Coupons","text":"<p>If your promotion requires coupons, you can create and manage its coupons by clicking the \"Coupons\" link at the top of the promotion's Edit page:</p> <p></p> <p>See Using coupons for coupon-specific documentation.</p>"},{"location":"commerce2/user-guide/promotions/#delete-a-promotion","title":"Delete a promotion","text":"<p>Promotions can be deleted from the Promotions table or using the Promotion edit form.</p> <p></p> <p>Whenever you elect to delete a promotion through the administrative UI, you will need to confirm the deletion. Deleting a promotion is an irreversible operation.</p> <p></p> <p>Whenever a promotion is deleted, all of its coupons and associated customer usage records will also be deleted. However, deleting promotions does not affect discounts that have already been applied to placed orders. Also, orders continue to store references to promotions, even after they are deleted.</p>"},{"location":"commerce2/user-guide/promotions/#using-coupons","title":"Using coupons","text":"<p>Let's now imagine that you're running a new email campaign that sends customers a coupon that they can use to get 10% off each order over $50. </p> <p>Setting up a coupon-based promotion is the same as creating a new promotion but with a extra step. You set up the promotion the same way as before, but this time let's add a Coupon to the promotion.</p> <p>Click on the Coupon tab at the top of the page. Click on \"Add Coupon\", and add the following:</p> <ul> <li>Enter a specific coupon code.</li> <li>Mark it as enabled (active).</li> <li>Set the number of times this coupon can be used as the \"Total available\" amount.</li> <li>To limit the number of times this coupon can be used by a single customer, set the \"Total per customer\" amount.</li> </ul> <p></p> <p>Finally, \"Save\" the coupon.</p> <p>Let's test this out by adding a products to a cart so that the order totals over $50. Notice that the discount is not automatically applied. It will only be applied if the coupon code is entered. During Checkout, you can see a \"Coupon code\" textfield in the \"Order summary\". Enter the coupon code for the promotion, and click the \"Apply coupon\" button.</p> <p></p> <p>You can now see that the 10% discount has been applied to the entire order.</p> <p></p>"},{"location":"commerce2/user-guide/promotions/#bulk-coupon-generation","title":"Bulk coupon generation","text":"<p>Now let's suppose that you want to create a large number of unique coupons for a promotion. You can use the Bulk coupon generator by clicking \"Generate coupons\" instead of \"Add coupon\" on a promotion's Coupons page:</p> <p></p> <p>For each batch of coupons you'd like to generate, you need to specify three things:</p> <ol> <li>The number of coupons to be generated.</li> <li>The coupon code pattern.</li> <li>Usage limitations, if any. By default, generated coupons are limited to a single use by a single customer. (See the description of Usage limitations for promotions for more information.)</li> </ol>"},{"location":"commerce2/user-guide/promotions/#coupon-code-pattern","title":"Coupon code pattern","text":"<p>Coupon code patterns are based on four attributes: format, prefix, suffix, and length.</p> <p>Format options are alphanumeric, alphabetic, and numeric and define the type of characters that will form the unique portion of the coupon code. For alphanumeric patterns, the characters 'I', 'O', 'i', 'l', '0', '1' are not used, to avoid recognition issues. Similarly, for alphabetic patterns, the characters 'I', 'i', 'l' are not used. All digits 0-9 are used for numeric patterns.</p> <p>Length is a positive integer that defines the number of characters that form the unique portion of the coupon code. Here are some examples of format/length values and the types of unique codes they produce:</p> Format Length Example code Alphanumeric 8 Xj7kcWn2 Alphabetic 5 HPAsu Numeric 10 8974406511 <p>Prefix and Suffix are optional strings that can be added before and after the unique portion of the coupon code.</p> <p>In this example, we will generate coupon codes that look like \"SAVE-10-HPAsu-2020\", with \"SAVE-10\" as the prefix, \"-2020\" as the suffix, and a unique 5 character alphabetic code.</p> <p></p> <p>Let's generate 100 coupons for this pattern. Coupons are generated in batches, with progress displayed:</p> <p></p> <p>We now have 100 unique coupons for our promotion:</p> <p></p>"},{"location":"commerce2/user-guide/promotions/#managing-promotions","title":"Managing promotions","text":"<p>To manage promotions, select \"Promotions\" from the \"Commerce\" administrative menu.</p> <p>The Promotions table lists all promotions, including both enabled and disabled promotions. In the first column, the name of the promotion is displayed along with a \"Disabled\" label for any disabled promotions. The \"Usage\" column displays both the current total usage and the usage limit (or \"Unlimited\" when there is no usage limit). The \"Per-customer limit\" displays the per-customer usage limit or \"Unlimited\". All promotions have a start date and time that is displayed in the \"Start date\" column. If a promotion has an end date and time, that value is displayed in the \"End date\" column. </p> <p>Standard operations links for editing/deleting/etc. promotions are provided in the last column, labeled, \"Operations\".</p> <p>If your site has more than 50 promotions, they will be grouped into pages with up to 50 promotions per page.</p> <p></p>"},{"location":"commerce2/user-guide/promotions/#ordering-promotions","title":"Ordering promotions","text":"<p>If any of your promotions have limited compatibility, then the order in which promotions are listed in the Promotions table can affect whether any particular promotion is applied to an order. Compatibility options can be set when editing a promotion:</p> <p></p> <p>Whenever a cart or draft order is updated, all \"available\" promotions are checked, in order, for applicability to the order. A promotion is considered available if all of the following are true:</p> <ul> <li>The promotion is enabled.</li> <li>The promotion does not have coupons. (Coupons are handled separately.)</li> <li>The promotion applies to the order's type.</li> <li>The promotion applies to the order's store.</li> <li>The current date/time is between the order's start and end dates.</li> <li>If the promotion has any general or customer-specific usage limits, they have not yet been met.</li> </ul> <p>The available promotions are sorted first by weight, from lowest to highest, and then by name, in the case of equally weighted promotions.</p> <p>To view the weight of promotions, click the \"Show row weights\" link at the top of the Promotions table, on the right:</p> <p></p> <p>When weights are displayed, a new \"Weight\" column appears with editable weight values. When weights are hidden, the grab-and-drop tool in the leftmost column can be used to reorder promotions and adjust their weights. Once the weights have been updated, click the \"Save\" button at the bottom of the page to save the new weight values.</p> <p></p>"},{"location":"commerce2/user-guide/setting-up-store/","title":"Creating and editing a store","text":"<p>A key component in Drupal Commerce is the store. Products and orders belong to stores. The store controls what billing and shipping countries are available when the customers go to complete checkout.</p> <p>Each store has a currency. To create a store which uses a new currency, you must import the currency.</p> <p>With support for multiple stores, Drupal Commerce allows specifying a default store. The default store is used when a store cannot be determined (a non-product or order page.)</p> <p>Stores are also used for invoicing, tax types, and any other settings necessary for understanding orders. This has many applications, and it's important to understand what use cases are supported out of the box and how that impacts checkout and other order workflows.</p>"},{"location":"commerce2/user-guide/setting-up-store/#before-we-begin","title":"Before we begin","text":"<p>To create a store you will need to have at least one currency imported, and then you can create a store. When Drupal Commerce is first installed, the Drupal site's default country's currency is imported. If your site was configured as United States the USD currency will be imported, if the default country was Germany then EUR would have been imported.</p> <p>See Adding a currency to add a new currency, if needed.</p>"},{"location":"commerce2/user-guide/setting-up-store/#create-a-store","title":"Create a store","text":"<p>Next, we need to create a store. Every product requires one store. Additional details will be shared about the power of having stores baked into the core of Commerce, but for now, all you need to do is define your store\u2019s name, address, and select a few things about taxes and billing.</p> <p></p> <p>Once you\u2019ve got all those details filled out, click save and move on to creating products! Woohoo!</p>"},{"location":"commerce2/user-guide/setting-up-store/#changing-the-default-store","title":"Changing the default store","text":"<p>The default store can be thought of as your primary store. When Drupal Commerce determines the current store for a product or order, this will be used if it cannot be determined.</p> <p>Go to the Stores management page from the Configuration page</p> <p></p> <p>Click on Edit for the store you would like to make default.</p> <p></p> <p>At the bottom of the form, check the Default checkout, and then press Save to update the store and make it default.</p> <p></p>"},{"location":"commerce2/user-guide/setting-up-store/#use-cases","title":"Use Cases","text":"<p>! This section should be moved to a subsection, possibly. Detailing how to use multiple stores, or setup a marketplace model.</p> <p>We optimize for the two use cases:</p> <ol> <li>One business that has one or more locations or 2. The marketplace model (where you have sellers)</li> </ol> <p>For these use cases and possibly others, it is up to the developer to fill in the gaps that are present in the order workflow. This is different from Commerce 1.x in that we will support stores by default, allowing for community contributions to extend the functionality instead of trying to build store functionality from scratch.</p>"},{"location":"commerce2/user-guide/setting-up-store/#one-or-more-locations","title":"One or more locations","text":"<p>This is the most common eCommerce situation where we have a single person, company, or organization that is taking payments online.</p>"},{"location":"commerce2/user-guide/setting-up-store/#marketplace-model","title":"Marketplace model","text":"<p>The marketplace model is where you have many sellers who are taking payment for unique products.</p>"},{"location":"commerce2/user-guide/shipping/","title":"Shipping","text":"<p>@todo! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p> <p>Shipping is enabled in Drupal Commerce 2.x with an external module Commerce Shipping. This module only provides an API and plugins for flat rate (both per order and per item) shipping functionality. As with Drupal Commerce 1.x, you will need a plugin or plugins  provided by other module(s) for calculating actual shipping costs with shipping services. Currently available plugins with status as of 6 November 2018:</p> <ul> <li>Flat Rate/Flate per Item - Beta, included in Commerce Shipping.</li> <li>Fedex - Alpha.</li> <li>Commerce Australia Post - Beta</li> <li>Commerce NZPost - V8.x-3.3</li> <li>USPS - In progress, not yet functional.</li> <li>Canada Post - Alpha</li> <li>UPS - Alpha</li> <li>Other modules/plugins such as Kiala have yet to be ported or created for Drupal Commerce 2.x.</li> </ul>"},{"location":"commerce2/user-guide/shipping/#before-you-begin","title":"Before you begin","text":"<p>@todo! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p> <p>If you only need flat rates for shipments, you will be able to install only Commerce Shipping. The recommended way to install Commerce shipping is with Composer.</p> <pre><code>composer require drupal/commerce_shipping\n</code></pre> <p>Then enable the module, via Drush, Drupal Console or the UI.</p> <pre><code>drupal module:install commerce_shipping\n</code></pre> <p>However, you will likely also want a specific plugin for calculating shipping rates for your shipper(s) of choice. For example, Fedex, at this time, there are limited plugins created and you may need to create your own. See the list above. In general, installing those plugins is as simple as installing the Drupal module that includes them, although they may have specific installation instructions, in which case, please follow them. For example, to install the Fedex plugin, you would:</p> <pre><code>composer require drupal/commerce_fedex\ndrupal module:install commerce_fedex\n</code></pre> <p>@todo Explain core concepts (packaging, boxes, shipments.)</p>"},{"location":"commerce2/user-guide/shipping/#enable-shipping-for-products","title":"Enable shipping for products","text":"<p>! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p> <p>Whatever shipping method you are using, you will need to set any shippable product variation types as shippable. Go to <code>/admin/commerce/config/product-variation-types/</code> and edit each variation type that you want to enable shipping for. </p> <p>Depending on your shipping plugin, you may also need to enable dimensions there.</p> <p>Edit your order type:</p> <ul> <li>Select one of the fulfilment workflows.</li> <li>Enable shipping and choose a shipment type.</li> <li>Select the 'Shipping' checkout flow</li> </ul>"},{"location":"commerce2/user-guide/shipping/#configure-shipping-methods","title":"Configure shipping methods","text":"<p>@todo! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/shipping/#using-fedex-usps-ups","title":"Using FedEx, USPS, UPS","text":"<p>@todo Explain these are modules which can be enabled, follow their instructions.</p>"},{"location":"commerce2/user-guide/shipping/#adding-custom-shipping-rates","title":"Adding custom shipping rates","text":""},{"location":"commerce2/user-guide/shipping/#managing-shipments","title":"Managing shipments","text":"<p>@todo We need help filling out this section! Feel free to follow the edit this page link and contribute.</p> <p>Workflow for handling shipments</p>"},{"location":"commerce2/user-guide/taxes/","title":"Taxes","text":""},{"location":"commerce2/user-guide/taxes/#overview-before-specific-topics","title":"Overview before specific topics","text":"<p>Apply a VAT rate on a product with Drupal Commerce 2:</p> <p>https://www.drupal.org/project/commerce_product_tax</p> <p>If you want to calculate the tax type per variation programmatically:</p> <p>https://www.flocondetoile.fr/blog/apply-vat-rate-product-drupal-commerce-2</p> <p>It includes an example of determining the VAT rate to apply depending on the type of product.</p> <p>There are some additional modules to manage taxes:</p> <ul> <li>Commerce Product Tax </li> <li>Commerce Product Tax Conditions</li> </ul>"},{"location":"commerce2/user-guide/taxes/#european-vat","title":"European VAT","text":"<p>@todo ! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/taxes/#swiss-vat","title":"Swiss VAT","text":"<p>@tood ! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/taxes/#canadian-gst","title":"Canadian GST","text":"<p>@tood ! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/taxes/#us-sales-tax","title":"US Sales tax","text":"<p>@tood ! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/taxes/#custom-tax-rules","title":"Custom tax rules","text":"<p>@todo ! We need help filling out this section! Feel free to follow the edit this page link and contribute.</p>"},{"location":"commerce2/user-guide/taxes/#commerce-product-tax","title":"Commerce Product Tax","text":""},{"location":"commerce2/user-guide/taxes/#overview","title":"Overview","text":"<p>Commerce Product Tax provides a user interface for selecting applicable tax rates on the product variation.</p> <p>This module provides a <code>commerce_tax_rate</code> field type, which allows selecting a standard, reduced or no tax rate, in cases of tax free products.</p>"},{"location":"commerce2/user-guide/taxes/#adding-a-new-tax-type","title":"Adding a new Tax Type","text":"<p>You will need to add a new tax type to your Store.</p> <p></p> <p>Select a tax type from the available plugin options and you will see a list of the tax rates.  Give the tax type an appropiate name and click save.</p> <p></p>"},{"location":"commerce2/user-guide/taxes/#update-product-variation-types","title":"Update Product Variation types","text":"<p>Next you will need to create a new field for your product variation(s). Select <code>Tax rate</code> from the dropdown and give the field an appropiate label.</p> <p></p> <p>On the next page, you will be able to select what tax type you wish to use and the allowed zones.  You can also set the default value to the Standard rate or a reduced/zero rate.</p> <p></p>"},{"location":"commerce2/user-guide/taxes/#update-product-variations","title":"Update Product Variations","text":"<p>You can now edit your product variations and select the applicable tax rate. Depending on your Store settings, your tax rate will be visible on the cart page. If you have products with different tax rates, they will be displayed on separate rows.</p> <p>Note</p> <p>If you have multiple stores, you can add multiple tax rate fields to a product variation. For example, a product could have a UK tax rate of 20% and a ROI tax rate of 23%</p> <p>Example</p> <p>We have a UK based Store that sells both physical and digital products. Most products have the standard 20% VAT tax rate.  Digital products are exempt and have a zero rate. Some products have a reduced rate of 5% VAT.</p> <p>When viewing the cart, we can see the three different levels of tax applied.  All prices displayed are inclusive of VAT.</p> <p></p>"}]}